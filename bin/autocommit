#!/usr/bin/env python
import os, sys, subprocess
import shutil, glob
import json
import logging
try:
	from pathlib2 import Path
except ImportError: # pragma: py3 only
	from pathlib import Path
import clckwrkbdgr.fs
import clckwrkbdgr.vcs.git as git

class AutocommitError(RuntimeError):
	pass

def file_has_changed(dest_path, source_path):
	source_path = Path(source_path)
	dest_path = Path(dest_path)
	if not dest_path.exists():
		logging.debug('{0}: does not exist'.format(dest_path))
		return True
	source_stat = source_path.stat()
	dest_stat = dest_path.stat()
	logging.debug('{0}: dest: {1}'.format(dest_path, dest_stat.st_mtime))
	logging.debug('{0}: src : {1}'.format(source_path, source_stat.st_mtime))
	if dest_stat.st_mtime < source_stat.st_mtime:
		logging.debug('{0}: outdated.'.format(dest_path))
		return True
	return False

def process_one_file(path, commit_message, dest_repo=None, dest_path=None, show_diff=False):
	if not Path(path).exists():
		logging.debug('{0}: does not exist, skipping.'.format(path))
		return
	if dest_repo and dest_repo != '.':
		if dest_path:
			dest_path = Path(dest_path)
			if dest_path.is_absolute():
				raise RuntimeError("{0}: dest_path is absolute; it should be relative to the history repo root ({1}): {2}".format(path, dest_repo, dest_path))
			dest_path = Path(dest_repo)/dest_path
		else:
			dest_path = Path(dest_repo)/path
		logging.debug('{0}: Checking state in {1}.'.format(path, dest_path))
		if file_has_changed(dest_path, path):
			logging.info('{0}: Updating.'.format(dest_path))
			if not dest_path.parent.exists():
				dest_path.parent.mkdir(parents=True)
			shutil.copy(str(path), str(dest_path))
		path = dest_path
	with clckwrkbdgr.fs.CurrentDir(dest_repo or '.'):
		try:
			if git.commit_one_file(path, commit_message, show_diff=show_diff):
				logging.info('{0}: Committed: {1}'.format(path, commit_message))
		except RuntimeError as e:
			raise AutocommitError(str(e))

import click

USAGE = """\b
Configuration file should be in JSON format:

\b
{
	# Path to history repo may contain tilde (~) or environment variables.
	# If path is '.', file is not copied to history repo and committed to the main one.
	'<path-to-history-repo' : {
		'<path/to/file>' : {
			# Default message is 'autocommit'.
			'message' : '<Commit message>'
			# Path where the file will copied to. Relative to the root of the history repo. By default uses the same relative path (from the key of this dict).
			'dest_path' : '<Commit message>'
			# If True, will display diff to stdout before commit. By default is False.
			'show_diff' : <bool>
		},
	},
	...
}

"""

@click.command(epilog=USAGE)
@click.option('-v', '--verbose', is_flag=True, help='Be more verbose. By default prints almost nothing.')
@click.option('--debug', is_flag=True, help='Display debug info.')
@click.argument('config_file', type=Path)
@click.argument('patterns', type=Path, nargs=-1)
def cli(config_file, patterns, verbose=False, debug=False):
	""" Performs autocommit actions and storing history in a separate repo.

	Reads configuration from CONFIG_FILE, see usage for details.

	If PATTERNS are specified, commits only those files that match them
	(file name contains pattern as substring).
	"""
	if debug:
		logging.getLogger().setLevel(logging.DEBUG)
	elif verbose:
		logging.getLogger().setLevel(logging.INFO)
	if patterns:
		logging.debug('Patterns: {0}'.format(patterns))
	os.chdir(str(config_file.parent))
	logging.debug('Switching to main repo: {0}'.format(os.getcwd()))
	config = json.loads(config_file.read_text())
	for repo in config:
		logging.debug('{0}: Processing repo...'.format(repo))
		files = config[repo]
		repo_path = Path(os.path.expandvars(os.path.expanduser(repo)))
		for filename in files:
			if patterns and not any(str(pattern) in str(filename) for pattern in patterns):
				logging.debug('{0}: File does not match any pattern.'.format(filename))
				continue
			logging.debug('{0}: Processing file...'.format(filename))
			props = files[filename]
			for real_filename in glob.iglob(filename):
				process_one_file(real_filename,
					commit_message=props.get('message', 'autocommit'),
					dest_repo=repo_path if repo != '.' else None,
					show_diff=props.get('show_diff', False),
					dest_path=props.get('dest_path', None),
					)

if __name__ == '__main__':
	cli()
