#!/usr/bin/python
import os, sys, subprocess
import re
import logging
from collections import namedtuple
from clckwrkbdgr import utils

LOCAL_REMOTE_NAME = 'local'

extract_match = lambda match: match.group(1) if match else None
non_empty = lambda x:x
print_lines = lambda lines: map(print, lines)

def match_any(line, patterns):
	return list(filter(non_empty, (re.match(expr, line) for expr in patterns)))

def search_any(line, patterns):
	return list(filter(non_empty, (re.search(expr, line) for expr in patterns)))

def skip_lines_with_patterns(lines, patterns):
	return [line for line in lines if not any(re.search(expr, line) for expr in patterns)]

def skip_lines_that_contains(lines, parts):
	return [line for line in lines if not any(part in line for part in parts)]

def colored(text, color):
	colors = {
			'red' : '\033[1;31m',
			}
	reset = '\033[0m'
	return colors[color] + text + reset

SemVer = namedtuple('SemVer', 'major minor revision')

class Git:
	class Error(RuntimeError): pass
	def add_tag(self, new_tag, commit_message):
		subprocess.run(["git", "tag", "-a", new_tag, "-m", commit_message])
	def push(self, remote='origin', branch='master'):
		subprocess.run(["git", "push", remote, branch, "--tags"])
	def add_bare_remote(self, name, path):
		existed = os.path.exists(path)
		if existed:
			print('Remote path already exists, considering bare repo already inited.')
		if not existed:
			subprocess.run(["git", "init", "--bare", path])
		subprocess.run(["git", "remote", "add", name, path])
		if not existed:
			subprocess.run(["git", "push", "-u", name, "master", "--tags"])
	def rootdir(self):
		git = subprocess.run(["git", "rev-parse", "--show-toplevel"], stdout=subprocess.PIPE)
		if git.returncode != 0:
			raise Git.Error(git.args)
		return git.stdout.decode().splitlines()[0]
	def tags(self):
		git = subprocess.run(["git", "tag"], stdout=subprocess.PIPE)
		if git.returncode != 0:
			raise Git.Error(git.args)
		return git.stdout.decode().splitlines()
	def remotes(self):
		git = subprocess.run(["git", "remote", "-v"], stdout=subprocess.PIPE)
		if git.returncode != 0:
			raise Git.Error(git.args)
		return git.stdout.decode().splitlines()
	def status(self):
		git = subprocess.run(["git", "status"], stdout=subprocess.PIPE)
		if git.returncode != 0:
			raise Git.Error(git.args)
		return git.stdout.decode().splitlines()
	def differs(self, filename):
		git = subprocess.run(["git", "diff", "--numstat", filename], stdout=subprocess.PIPE)
		if git.returncode != 0:
			raise Git.Error(git.args)
		diff = git.stdout.decode()
		if not diff:
			return False
		diff = diff .splitlines()[0]
		diff = diff.split(maxsplit=2)
		return diff[0] != '0' or diff[1] != '0'
	def branches(self):
		git = subprocess.run(["git", "branch"], stdout=subprocess.PIPE)
		if git.returncode != 0:
			raise Git.Error(git.args)
		return [line[2:] for line in git.stdout.decode().splitlines()]

def find_git_repos(root='.'):
	for root, dirnames, filenames in os.walk(root, followlinks=True):
		if '.git' not in dirnames:
			continue
		dirnames = dirnames[:]
		yield os.path.abspath(root)

class CurrentDir:
	def __init__(self, path):
		self.path = path
	def __enter__(self):
		self.prev = os.getcwd()
		os.chdir(self.path)
	def __exit__(self, e, tb, i):
		os.chdir(self.prev)

import click

@click.group()
def cli():
	""" Collection of dev project handling functions. """
	pass

def versions_from_tags(tags):
	versions = [extract_match(re.search(r'(\d+[.]\d\+[.]\d+)', line)) for line in tags]
	versions = filter(non_empty, tags)
	versions = map(lambda version: SemVer(map(int, version.split('.'))), versions)
	return sorted(versions)

def find_repo_name(remotes):
	repo_names = set([extract_match(re.search(r'/([^/]*)[.]git')) for remote in remotes if '(push)' in remote])
	if not repo_names:
		print("Cannot extract unambiguous repo name from `git remote -v`: no valid remotes")
		return None
	if len(repo_names) > 1:
		print("Cannot extract unambiguous repo name from `git remote -v`: {0}".format(', '.join(repo_names)))
		return None
	return next(iter(repo_names))

@cli.command()
@click.argument('section', required=False, default=None, type=click.Choice(['major', 'minor', 'rev', 'revision']))
@utils.exits_with_return_value
def tag(section=None):
	""" Handles Semantic Versioning for projects.
	Creates new tag with advancement in specified section of the version.
	If section is not specified, lists all tags for current project.
	"""
	tags = Git().tags()
	if section is None:
		print_lines(tags)
		return True

	versions = versions_from_tags(tags)
	repo_name = find_repo_name(Git().remotes())

	last_version = versions[-1] if versions else SemVer(0, 0, 0)
	if section == 'major':
		new_version = SemVer(last_version.major + 1, 0, 0)
	elif section == 'minor':
		new_version = SemVer(last_version.major, last_version.minor + 1, 0)
	elif section in 'rev revision'.split():
		new_version = SemVer(last_version.major, last_version.minor, last_version.revision + 1)
	else:
		print("Unknown section: <{0}>. Should be: major, minor or revision (rev).".format(section))
		return False

	new_version = '.'.join(new_version)
	print_lines(tags)
	yes = input("Add <{0}>, (y)es? ".format(new_version))
	if yes.lower() != "y":
		return False
	Git().add_tag(new_version, "{0} v{1}".format(repo_name, new_version))
	print("Added new tag <{0}>".format(new_version))
	return True

@cli.command()
@click.argument('section', required=False, default=None, type=click.Choice(['major', 'minor', 'rev', 'revision']))
@utils.exits_with_return_value
def version(section=None):
	""" Displays current project's version.
	Extracts current project version from the last tag.
	"""
	versions = versions_from_tags(Git().tags())
	if not versions:
		return False
	version = versions[-1]
	if section == 'major':
		print(version.major)
	elif section == 'minor':
		print(version.minor)
	elif section in 'rev revision'.split():
		print(version.revision)
	else:
		print("Unknown section: <{0}>. Should be: major, minor or revision (rev).".format(section))
		return False
	return True

def git_has_changes():
	OK_LINES = [
			r'#\?\s*On branch ',
			r'На ветке ',
			r'Your branch is up-to-date with',
			r'Ваша ветка обновлена в соответствии с ',
			r'nothing to commit',
			r'нечего коммитить, нет изменений в рабочем каталоге',
			r'^$',
			]
	status = Git().status()
	status = skip_lines_with_patterns(status, OK_LINES)
	return status

def git_has_changes_besides_filtered_out():
	status = git_has_changes()
	CHANGES = [
			r'(use "git add <file>..." to update what will be committed)',
			r'(используйте «git add <файл>…», чтобы добавить файл в индекс)',
			r'(use "git checkout -- <file>..." to discard changes in working directory)',
			r'(используйте «git checkout -- <файл>…», чтобы отменить изменения',
			r'в рабочем каталоге)',
			r'no changes added to commit (use "git add"',
			r'нет изменений добавленных для коммита',
			r'(используйте «git add» и/или «git commit -a»)',
			]
	NOT_STAGED = [
			r'^Changes not staged for commit:',
			r'^Изменения, которые не в индексе для коммита:',
			]
	MODIFIED = [
			r'^\s*modified:\s+(.*)$',
			r'^\s*изменено:\s+(.*)( \(новые коммиты\))$',
			r'^\s*изменено:\s+(.*)$',
			]
	status = skip_lines_that_contains(status, CHANGES)
	changes = []
	in_changes = False
	for line in status:
		if not line.strip():
			continue
		if not in_changes:
			if match_any(line, NOT_STAGED):
				in_changes = True
			else:
				changes.append(line)
		else:
			modifications = match_any(line, MODIFIED)
			if not modifications:
				in_changes = False
				changes.append(line)
			else:
				filename = modifications[0].group(1)
				if Git().differs(filename):
					changes.append(filename)
	return list(map(non_empty, changes))

@cli.command()
@click.argument('thorough', required=False, default=None, type=click.Choice(['thorough']))
@utils.exits_with_return_value
def status(thorough=False):
	""" Checks project's status.
	Prints statuses for all projects in directory recursively.
	Skips up-to-date projects, prints only modifications or pending commits.

	With 'thorough' checks actual diffs to see if gitfilters actually produce no diff.
	"""
	thorough = thorough == 'thorough'
	has_changes = git_has_changes
	if thorough:
		has_changes = git_has_changes_besides_filtered_out
	for repo in find_git_repos():
		with CurrentDir(repo):
			if has_changes():
				print(colored(os.path.basename(repo), 'red'))
				sys.stdout.flush()
				os.system("git -c color.status=always status")
	return True

@cli.command()
@utils.exits_with_return_value
def push():
	""" Pushes pending commits to remote repositories for all sub-directories recursively. """
	BRANCH_AHEAD = [
			r'Your branch is ahead of',
			r'Ваша ветка опережает .* на ',
			]
	for repo in find_git_repos():
		with CurrentDir(repo):
			status = Git().status()
			is_ahead = list(filter(lambda line: search_any(line, BRANCH_AHEAD), status))
			if not is_ahead:
				continue
			print(colored(os.path.basename(repo), 'red'))
			branches = Git().branches()
			remotes = Git().remotes()
			for branch in branches:
				Git().push('origin', branch)
				if any(LOCAL_REMOTE_NAME in remote for remote in remotes):
					Git().push(LOCAL_REMOTE_NAME, branch)
	return True

@cli.command()
@click.argument('repo_storage_path')
@utils.exits_with_return_value
def addlocal(repo_storage_path):
	""" Creates Git bare repository in local filesystem and adds it as a remote to current repo.
	REPO_STORAGE_PATH is <repo local storage path>[/<repo name>[.git]]
	"""
	remotes = Git().remotes()
	if any(LOCAL_REMOTE_NAME in remote for remote in remotes):
		print("Git remote named '{0}' is already added to this repo:".format(LOCAL_REMOTE_NAME))
		print_lines(remotes)
		return False
	if not os.path.exists(repo_storage_path):
		name = os.path.basename(repo_storage_path)
		if name.endswith('.git'):
			name = name[:-4]
		repo_storage_path = os.path.dirname(repo_storage_path)
	else:
		rootdir = Git().rootdir()
		name = os.path.basename(rootdir)
	new_remote_path = os.path.join(repo_storage_path, name + '.git')
	yes = input("Add new bare repo at {0}? ".format(new_remote_path))
	if yes.lower() != "y":
		return False
	Git().add_bare_remote(LOCAL_REMOTE_NAME, new_remote_path)
	return True

@cli.command()
@utils.exits_with_return_value
def commit_submodules():
	""" Commits updated submodules if there are any. """
	subprocess.call(['git', 'stash', '--keep-index'])
	paths = subprocess.check_output(['git', 'submodule', '-q', 'foreach', 'echo $sm_path']).decode('utf-8', 'replace').splitlines()
	were_updates = False
	for sm_path in paths:
		if not subprocess.check_output(['git', 'status', '-q', sm_path]):
			continue
		were_updates = True
		subprocess.call(['git', 'add', sm_path])
	subprocess.call(['git', 'commit', '-m', 'Updated submodules.'])
	subprocess.call(['git', 'stash', 'pop'])

if __name__ == "__main__":
	try:
		cli()
	except Git.Error as e:
		logging.error(e)
		sys.exit(1)
