#!/usr/bin/env python
import os, sys, subprocess
import itertools
import configparser
try:
	from pathlib2 import Path
except ImportError: # pragma: no cover
	from pathlib import Path
import click
try:
	import termcolor
except ImportError: # pragma: no cover
	import dummy as termcolor
import clckwrkbdgr.xdg as xdg

class Registry(object):
	""" Registry of functions with optional set of attributes.
	Usage:
	registry = Registry('name', 'some_other_attr')
	@registry('foo', 'bar')
	def function(arbitrary_args...):
		...
	for func in registry:
		func(...)
		func.name
		func.some_other_attr
		....
	"""
	def __init__(self, *required_keywords):
		""" If required_keywords are specified,
		each decorator will expect a set of unnamed arguments of the same size.
		Keywords and arguments are matched correspondingly as attributes.
		See __call__ for details about attributes.
		"""
		self._list = []
		self._required_keywords = required_keywords or []
	def __iter__(self):
		""" Yields registered functions.
		Attributes are available as ordinary attributes of function objects:
		for func in registry:
			func.name
			func.some_other_attr
			...
		"""
		return iter(self._list)
	def __call__(self, *required_attrs, **attrs):
		""" Registers function with attributes.
		If some attributes are passed as unnamed arguments, they are matched with
		corresponding keyword from Registry definition.
		Attribute name should be proper Python keyword,
		as they will be available as ordinary attribute of function object.
		"""
		assert len(required_attrs) == len(self._required_keywords), 'Number of supplied unnamed arguments {0} does not correspond defined number of required keywords {1}'.format(repr(required_attrs), repr(self._required_keywords))
		attrs.update(dict(zip(self._required_keywords, required_attrs)))
		def _real_wrapper(func):
			for attr_name, attr_value in attrs.items():
				setattr(func, attr_name, attr_value)
			self._list.append(func)
			return func
		return _real_wrapper

test_suite = Registry('name')

@test_suite('py2')
def python_2_unittest(test, quiet=False):
	args = ['python2', '-m', 'coverage', 'run', '-m', 'unittest']
	if test:
		if quiet:
			args += ['--quiet']
		args += [test]
	else:
		args += ['discover'] # FIXME py2 discover does not recognize --quiet.
	rc = subprocess.call(args)
	rc += subprocess.call(['python2', '-m', 'coverage', 'report', '-m']) # FIXME coverage report has no support for quiet run.
	return rc

@test_suite('py3')
def python_3_unittest(test, quiet=False):
	args = ['python3', '-m', 'coverage', 'run', '-m', 'unittest']
	if test:
		if quiet:
			args += ['--quiet']
		args += [test]
	else:
		args += ['discover']
		if quiet:
			args += ['--quiet']
	rc = subprocess.call(args)
	rc += subprocess.call(['python3', '-m', 'coverage', 'report', '-m']) # FIXME coverage report has no support for quiet run.
	return rc

@test_suite('bash')
def bash_unittest(test, quiet=False):
	unittest_bash = xdg.XDG_CONFIG_HOME/'lib'/'unittest.bash'
	args = ['bash', str(unittest_bash)]
	if quiet:
		args += ['--quiet']
	args += [test or 'discover']
	rc = subprocess.call(args)
	return rc

def ensure_test_data_dir():
	setup_cfg = configparser.SafeConfigParser()
	setup_cfg.read(['setup.cfg'])
	if 'unittest' in setup_cfg:
		if 'data_dir' in setup_cfg['unittest']:
			data_dir = setup_cfg['unittest']['data_dir']
			Path(data_dir).expanduser().mkdir(parents=True, exist_ok=True)

@click.command()
@click.argument('tests', nargs=-1)
@click.option('-q', '--quiet', is_flag=True, default=False,
		help='Quiet run (less output, report errors only)')
@click.option('-p', '--platform', default=['all'], multiple=True,
		type=click.Choice(['all'] + [_.name for _ in test_suite], case_sensitive=False),
		help='List of testing platforms to execute tests for.')
def main(tests, quiet=False, platform=None):
	""" Runs specified test suites/modules/cases in current directory
	for a number of known platforms/languages.
	See list of supported platforms in --platform option description.
	TESTS are a list of test specifications conforming to Python unittest spec:
	   module.submodule...[.TestClass][.test_case]
	If test specs are omitted, complete discovery is executed (depends on corresponding platform).
	"""
	ensure_test_data_dir()
	tests = tests or [None]

	rc = 0
	for runner in test_suite:
		if not ('all' in platform or runner.name in platform):
			continue
		for test in tests:
			if not quiet:
				print(termcolor.colored('Running {0} tests for: {1}'.format(runner.name, test or '<autodiscovery>'), 'blue'))
			result = runner(test, quiet=quiet)
			rc += result
			if not quiet:
				if result == 0:
					print(termcolor.colored('Success.', 'green'))
				else:
					print(termcolor.colored('RC: {0}'.format(result), 'red'))
	if not quiet and rc != 0:
		print(termcolor.colored('Total RC: {0}'.format(rc), 'red'))
	sys.exit(rc)

if __name__ == '__main__':
	main()
