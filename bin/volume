#!/bin/bash
. "$XDG_CONFIG_HOME/lib/sound.bash"
. "$XDG_CONFIG_HOME/lib/utils.bash"
. "$XDG_CONFIG_HOME/lib/click.bash"

channel=Master
default_volume=50
step=5

click::command cli 'Controls volume level.'
click::flag '-n' '' 'notify' --help='display notification about volume change (sometimes built-in one does not work)'
click::argument 'command' --default='print current volume' --help='{ up | down | [reset] <level> }
up - increases volume by specified percents. Default is 5.
down - decreases volume by specified percents. Default is 5.
reset - resets volume level to specified value. Default is 50.
Without arguments will just print current volume level and exit.'
click::argument 'level' --default=auto --help='Value for specified command (see <command>)'
cli() {
	if [ -n "${CLICK_ARGS[notify]}" ]; then
		show_notification_popup=true
	fi
	value="${CLICK_ARGS[level]}"
	if [ "$value" == 'auto' ]; then
		value=''
	fi

	old_volume=$(current_volume)
	old_status=$(current_channel_status)

	if [ "${CLICK_ARGS[command]}" == "print current volume" ]; then
		current_volume
	elif [ "${CLICK_ARGS[command]}" == "up" ]; then
		volume_up "$channel" "${value:-$step}"
	elif [ "${CLICK_ARGS[command]}" == "down" ]; then
		volume_down "$channel" "${value:-$step}"
	elif [ "${CLICK_ARGS[command]}" == "reset" ]; then
		set_volume "$channel" "${value:-$default_volume}"
	elif echo "${CLICK_ARGS[command]}" | grep -q '^[0-9]\+$'; then
		set_volume "$channel" "${CLICK_ARGS[command]}"
	else
		panic "Unknown volume command: ${CLICK_ARGS[command]}"
	fi

	volume=$(current_volume)
	status=$(current_channel_status)
	if [ "$volume" == "$old_volume" -a "$status" == "$old_status" ]; then
		show_notification_popup=false
	fi

	if [ "$show_notification_popup" == true ]; then
		if [ "$status" = '[off]' ]; then
			icon=audio-volume-muted
		elif [ "$volume" -eq 0 ]; then
			icon=audio-volume-muted
		elif [ "$volume" -lt 33 ]; then
			icon=audio-volume-low
		elif [ "$volume" -lt 66 ]; then
			icon=audio-volume-medium
		else
			icon=audio-volume-high
		fi
		line=$(echo $volume | python -c 'v=int(input());i=v//5;print("{"+"|"*i+"-"*(20-i)+"} " + str(v) + "%")')
		notification -q --type fixed --no-history -t "Volume" -i "$icon" "$line" &
	fi
}

if item_in '-c' "$@"; then # FIXME workaround for options with nargs. Should actually deprecate this way.
	declare -a actual_args
	while [ -n "$1" -a "$1" != '-c' ]; do
		actual_args+=("$1")
		shift
	done
	shift # To skip '-c'
	old_volume=$(current_volume)
	(
		click::run "${actual_args[@]}"
	) # To ignore exit in click.
	finally "set_volume '$channel' '$old_volume'"
	"$@" # Run actual command.
	exit $?
fi

click::run "$@"
