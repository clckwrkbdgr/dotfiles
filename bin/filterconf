#!/usr/bin/env python
import os, sys, subprocess
import re
import argparse

class Environment(object):
	def __init__(self):
		self.envvars = {} # name: value
		self.known_vars = {} # name: lambda
	def known_names(self):
		return self.known_vars.keys()
	def register(self, name, loader):
		self.known_vars[name] = loader
	def get(self, name):
		if name not in self.envvars:
			self.envvars[name] = self.known_vars[name]()
		return self.envvars[name]

"""
text:
	cat/plain sort

xml:
	delete tag (full node) by xpath
	delete
	replace attribute value by xpath
	sort ?
	sort-xml - sort tags by attribute

json:
	pretty json (consider it as sort ?? or maybe the other way around: consider prettification and it would be sort for xml/ini/etc)

firefox pref.js
	user_pref("accessibility.blockautorefresh", true);
	delete preference by pattern (including regexp and wildcard)
	replace preference value by name and possibly regexp pattern with match groups

ini:
	sort sections/ sort values in sections
	delete ini setting by section/name
	delete whole section
	including search by regexp
	replace value for given section/name to another one
	including regexp and regexp match groups

scheme:
	delete value by setting name (including regex in names)
	"""

def main():
	supported_formats = ['txt']
	parser = argparse.ArgumentParser(description="Script to filter configuration files.")
	parser.add_argument('--restore', action='store_true', default=False, help='Restore filtered config file to normal state instead of filtering.')
	parser.add_argument('-f', '--format', nargs=1, required=True, choices=supported_formats, help="Format of configuration file. Supported formats: " + ', '.join(supported_formats))
	parser.add_argument('-e', '--enviro', nargs=1, action='append',
			help="Custom variable for usage in filtering. Its value will be substitude with its name wherever found upon filtering, "
			"and will be substituted back with the value for the current system upon restoring. "
			"Should be in form NAME=VALUE, where value is either environment variable with dollar sign, e.g.: `HOME=$HOME`, "
			"or command which prints value to stdout, e.g.: `HOME=echo $HOME`. "
			"By default only $HOME is recognized."
			)

	settings = parser.parse_args()
	settings.enviro = [x for s in settings.enviro for x in s] if settings.enviro else []

	envvars = Environment()
	envvars.register('HOME', lambda: os.getenv('HOME'))
	for enviro in settings.enviro:
		if not '=' in enviro:
			raise Exception('Expected NAME=VALUE for -e argument, got {0}'.format(enviro))
		name, value = enviro.split('=', 1)
		if value.startswith('$'):
			varname = value[1:]
			if os.getenv(varname) is None:
				raise Exception('Environment variable {0} is not defined!'.format(varname))
			envvars.register(name, lambda varname=varname: os.getenv(varname))
		else:
			envvars.register(name, lambda command=value: subprocess.check_output(command, shell=True).rstrip('\n'))

	content = sys.stdin.read()
	if settings.restore:
		for name in envvars.known_names():
			placeholder = '${0}'.format(name)
			if placeholder in content:
				content = content.replace(placeholder, envvars.get(name))
	else:
		for name in envvars.known_names():
			placeholder = '${0}'.format(name)
			content = content.replace(envvars.get(name), placeholder)
	sys.stdout.write(content)

if __name__ == "__main__":
	ok = main()
	if not ok:
		sys.exit(1)
