#!/bin/bash
# Manages audio stream over network.
# https://superuser.com/a/750324/967860

export LC_ALL=C # Needed for load-module to work correctly.
source_name="$(pactl list sources short | grep output | awk '{print $2}')"
rate=44100
channels=2
port=8000

function print_usage() {
	for line in "$@"; do echo "$line"; done
	echo "Usage: $0 [-c <channel num>] [-p <port>] [-r <bitrate>] start|restart|stop|status"
	echo "  -c  - Number of channels, 1 or 2. Default is 2."
	echo "  -p  - Port number. Default is 8000."
	echo "  -r  - Bitrate: 11025, 12000, 22050, 24000, 44100 (default), 48000."
}

function start_service() {
	echo -n 'Starting service... #'
    pactl load-module module-simple-protocol-tcp "rate=$rate" format=s16le "channels=$channels" "source=$source_name" record=true "port=$port"
	netstat -nlt | grep "$port" # To check started socket.
}

function service_status() {
	pactl list | grep tcp -B1 | grep M
}

function stop_service() {
	service_number=$(service_status | sed 's/[^0-9]//g')
	if [ -n "$service_number" ]; then
		pactl unload-module "$service_number"
	fi
}

function read_current_settings() {
	trap "rm -f /tmp/audiostreaming.$$" EXIT
	pactl list | grep tcp -A1 | tail -1 >/tmp/audiostreaming.$$
	current_rate=$(cat /tmp/audiostreaming.$$     | sed     's/^.* rate=\([^ ]\+\)\( .*\)\?$/\1/')
	current_channels=$(cat /tmp/audiostreaming.$$ | sed 's/^.* channels=\([^ ]\+\)\( .*\)\?$/\1/')
	current_port=$(cat /tmp/audiostreaming.$$     | sed     's/^.* port=\([^ ]\+\)\( .*\)\?$/\1/')
	rate=${current_rate:-$rate}
	channels=${current_channels:-$channels}
	port=${current_port:-$port}
	rm -f /tmp/audiostreaming.$$
}

read_current_settings

while getopts ":hr:p:c:" opt; do
	case "$opt" in
		h) print_usage; exit 0;;
		r) rate=$OPTARG;;
		p) port=$OPTARG;;
		c) channels=$OPTARG;;
		\?) print_usage "Invalid option -$OPTARG" >&2; exit 1;;
		:) print_usage "Parameter is missing for -$OPTARG" >&2; exit 1;;
	esac
done
shift $((OPTIND-1))

case "$1" in
	status)
		if service_status; then
			echo "rate=$rate"
			echo "channels=$channels"
			echo "port=$port"
		else
			exit 1
		fi
		;;
	start)
		stop_service
		start_service
		;;
	restart)
		stop_service
		start_service
		;;
	stop)
		stop_service
		;;
	*)
		print_usage "Unknown command: $@" >&2
		exit 1
		;;
esac
