#!/usr/bin/python
import os, sys, subprocess
import time, threading, functools
import re
import configparser
import logging
from pathlib import Path
from clckwrkbdgr import xdg, utils
import clckwrkbdgr.collections
from clckwrkbdgr.leds import LEDList, GenMon, join_image_strip

CONFIG_FILES = [
		xdg.save_config_path('xfce4')/"xfce-leds.ini",
		xdg.XDG_DATA_HOME/"xfce-leds.ini",
		Path('~/.local').expanduser()/"xfce-leds.ini",
		]

CONFIG_DESCRIPTION = """
\b
Each state is defined as plugin section in config files.

\b
[State Title]
# Icon to show when state is On:
icon = "/path/to/icon/file"
# If tooltip is missing, section title is taken instead:
tooltip = "Text to show in tooltip when state is On."
# Path to plugin function:
plugin_func = '~/path/to/plugin/file.py:plugin_function'
# Or builtin plugin spec (see below for list of supported builtins):
plugin_func = 'builtin:<builtin_function_name'
# Plugin may be a generic function and require some specific parameters for the state:
plugin_data = '<string data>'

Plugin function is normal Python function which accepts parameters (data, callback_to_update_state, terminator_event) and should run inifinite watch loop for the state.
It is launched in a separate thread and should exit ASAP when terminator_event.is_set().
Data is a string defined for the state in configuration file under 'plugin_data'. By default it is empty string.
Callback is a function of a single bool param, which should be called when state is changed: update_state(new_state). It will trigger immediate update of display.
"""
CONFIG_DESCRIPTION += "\n\bConfig files:\n" + '\n'.join(map(str, CONFIG_FILES)) + '\n'

def synchronized(f):
	lock = threading.RLock()
	@functools.wraps(f)
	def _actual(*args, **kwargs):
		with lock:
			return f(*args, **kwargs)
	return _actual

@synchronized
def read_xset_led_status():
	if time.time() - read_xset_led_status.last_timestamp < 0.9:
		return read_xset_led_status.data
	xset = subprocess.Popen(["xset", "q"], stdout=subprocess.PIPE)
	out, err = xset.communicate()
	if xset.returncode != 0:
		if err:
			logging.error('failed to read xset state: {0}'.format(err))

	out = out.decode('utf-8')
	out = out.splitlines()[3:8]
	leds = {}
	for line in out:
		for status in re.findall(r'[0-9][0-9]: [A-Za-z 0-9]+: +o[fn][f ]', line):
			m = re.match(r'(\d+) *: *([^ ][^:]+) *: *(\w+)', status)
			if m and len(m.groups()) == 3:
				leds[m.groups()[1]] = m.groups()[2] == 'on'
	read_xset_led_status.data = leds
	read_xset_led_status.last_timestamp = time.time()
	return leds
read_xset_led_status.data = {}
read_xset_led_status.last_timestamp = 0

builtins = clckwrkbdgr.collections.AutoRegistry()

@builtins('command')
def builtin_plugin_command(command, update_state, terminator):
	""" Runs command each 1 sec and checks return code.
	0 means On, non-zero means Off.
	"""
	state = False
	while not terminator.is_set():
		try:
			new_state = 0 == subprocess.call(command, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
			if state != new_state:
				state = new_state
				update_state(state)
		except FileNotFoundError:
			logging.error("Error executing command {0}".format(repr(command)))
		time.sleep(1)

@builtins('led')
def builtin_plugin_led(led_name, update_state, terminator):
	""" Checks state of a led (name is given as plugin_data).  """
	state = False
	while not terminator.is_set():
		xset = read_xset_led_status()
		if led_name in xset:
			new_state = xset[led_name]
			if state != new_state:
				state = new_state
				update_state(state)
		else:
			logging.error("Unknown led {0}".format(led_name))
		time.sleep(1)

@builtins('led_off')
def builtin_plugin_led_off(led_name, update_state, terminator):
	""" Same as 'led' but inverted - yield 'On' when leds is off and vice-versa. """
	state = False
	while not terminator.is_set():
		xset = read_xset_led_status()
		if led_name in xset:
			new_state = not xset[led_name]
			if state != new_state:
				state = new_state
				update_state(state)
		else:
			logging.error("Unknown led {0}".format(led_name))
		time.sleep(1)

@builtins('inotify_exists')
def builtin_plugin_inotify_exists(path, update_state, terminator):
	""" Monitors path (file or directory, given as plugin_data) for existence.
	Yields 'On' when path is created, 'Off' when removed.
	Parent path must exist! """
	import inotify_simple as inotify
	path = os.path.expandvars(os.path.expanduser(path))
	parent, name = os.path.dirname(path), os.path.basename(path)
	while not os.path.exists(parent):
		time.sleep(1)
	if os.path.exists(path):
		update_state(True)

	watcher = inotify.INotify()
	wd = watcher.add_watch(parent, inotify.flags.CREATE | inotify.flags.DELETE | inotify.flags.MOVED_FROM | inotify.flags.MOVED_TO)
	while not terminator.is_set():
		for event in watcher.read(timeout=10, read_delay=10):
			if event.name != name:
				continue
			if event.mask & (inotify.flags.CREATE | inotify.flags.MOVED_TO):
				update_state(True)
			elif event.mask & (inotify.flags.DELETE | inotify.flags.MOVED_FROM):
				update_state(False)
	watcher.rm_watch(wd)

BUILTIN_FUNCTIONS = """
\b
Supported builtin functions:
"""
for name in builtins.keys():
	BUILTIN_FUNCTIONS += '- {0}: {1}\n'.format(name, builtins[name].__doc__)

class Plugin(object):
	def __init__(self, led_list_callback, image, title=None, plugin_func=None, data=None):
		self.led_list_callback = led_list_callback
		self.title = title
		self.image = image
		self.data = data
		self.plugin_func = plugin_func

	def run_thread(self, terminator):
		self.plugin_func(self.data,
				lambda state: self.led_list_callback(self, state),
				terminator
				)

class Config(object):
	def __init__(self, filenames):
		self.filenames = filenames
		self.parser = configparser.ConfigParser()
		self.parser.read(list(map(str, self.filenames)))
	def _read_value(self, category, setting_name, default_value=None):
		value = category.get(setting_name)
		if value is None:
			if default_value is None:
				logging.error("Missing setting {1} for group {0}.".format(repr(category), repr(setting_name)))
			return default_value
		return utils.unquote_string(value, fix_unicode_escape=True)
	def parse_plugin_function(self, group):
		plugin_func = self._read_value(group, 'plugin_func')
		plugin_data = self._read_value(group, 'plugin_data', '')
		if plugin_func:
			m = re.match(r'^(.+):([A-Za-z_][A-Za-z_0-9]*)$', plugin_func)
			if not m:
				logging.error("{0}:Cannot parse plugin_func='{1}'. Expected: '<path or literal builtin>:<function_name>'".format(group, plugin_func))
				return None, None
			plugin_file, plugin_func = m.groups()
			if plugin_file == 'builtin':
				try:
					plugin_func = builtins[plugin_func]
				except KeyError:
					logging.error("{0}:Unknown builtin function '{1}'".format(group, plugin_func))
					return None, None
			else:
				# TODO load plugin file.
				logging.error('{0}:Loading plugins from files are not supported yet.'.format(group))
				return None, None
			return plugin_func, plugin_data
		# Legacy way of setting built-in plugins.
		command, name = None, None
		if 'command' in group:
			logging.warning("Config value 'command' is deprecated. Use plugin_func='builtin:command' and plugin_data='<command>' instead.")
			command = utils.unquote_string(group['command'], fix_unicode_escape=True)
			return builtin_plugin_command, command
		elif 'name' in group:
			logging.warning("Config value 'name' is deprecated. Use plugin_func='builtin:led[_off]' and plugin_data='<LED name>' instead.")
			name = utils.unquote_string(group['name'], fix_unicode_escape=True)
			if name.startswith('!'):
				return builtin_plugin_led_off, name[1:]
			else:
				return builtin_plugin_led, name
		logging.error("Config section {0} does not have plugin_func defined.".format(group))
		return None, None
	def load_plugins(self, led_list_callback):
		for index, title in enumerate(self.parser):
			if title == 'DEFAULT':
				continue
			group = self.parser[title]
			plugin_func, plugin_data = self.parse_plugin_function(group)
			image = self._read_value(group, 'image')
			tooltip = self._read_value(group, 'tooltip', title)
			if not image:
				logging.warning("{0}: Config value 'image_on' was renamed to 'image'".format(group))
				image = self._read_value(group, 'image_on')
			group = Plugin(led_list_callback,
					image=os.path.expanduser(image),
					plugin_func=plugin_func, data=plugin_data,
					title=tooltip,
					)
			yield group

import click

@click.command(epilog=CONFIG_DESCRIPTION + BUILTIN_FUNCTIONS)
def cli():
	""" User service to provide visualization of some custom state (LED state etc).

	Serves as daemon, updating led info when state is changes.
	Use $XDG_CONFIG_HOME/bin/xfce-leds-genmon.sh to turn this info into output suitable for genmon plugin.
	"""
	settings = Config(CONFIG_FILES)
	leds = LEDList()
	plugins = list(settings.load_plugins(leds.callback))
	genmon = GenMon('genmon-2')
	terminator = threading.Event()
	watchers = [threading.Thread(target=plugin.run_thread, args=(terminator,)) for plugin in plugins]
	try:
		for watcher in watchers:
			watcher.start()
		while True:
			with leds.lock:
				genmon.update(leds.get())
				genmon.refresh_plugin()
				leds.changed.clear()
			leds.changed.wait()
	finally:
		terminator.set()
		for watcher in watchers:
			watcher.join()

if __name__ == "__main__":
	cli()
