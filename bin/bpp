#!/usr/bin/env python
import os, sys, re, subprocess
from clckwrkbdgr.fs import CurrentDir

INCLUDE = re.compile(r'^\s*#\s*include\s*["<]([^>"]+)[">]\s*(!?)$')
SHELL_COMMAND = re.compile(r'^\s*#\s*shell\s+[`]([^`]+)[`]\s*$')

def find_file(filename, paths):
	for path in paths:
		path = os.path.expanduser(path)
		if os.path.isfile(os.path.join(path, filename)):
			return os.path.join(path, filename)
	return filename

def preprocess(lines, include_path=None):
	include_path = include_path or []
	for line in lines:
		include = INCLUDE.match(line)
		if include:
			try:
				filename = include.group(1)
				ignore_errors = (include.group(2) == '!')
				filename = os.path.expanduser(filename)
				filename = find_file(filename, include_path)
				if not os.path.exists(filename) and ignore_errors:
					continue
				with open(filename) as f:
					with CurrentDir(os.path.dirname(filename)):
						yield from preprocess(f)
			except Exception as e:
				sys.stderr.write(str(e))
				sys.stderr.write('\n')
			continue
		shell_command = SHELL_COMMAND.match(line)
		if shell_command:
			try:
				command = shell_command.group(1)
				output = subprocess.check_output(command, shell=True)
				for line in output.decode('utf-8', 'replace').splitlines(True):
					yield line
			except subprocess.CalledProcessError as e:
				sys.stderr.buffer.write(e.stdout)
			except Exception as e:
				sys.stderr.write(str(e))
				sys.stderr.write('\n')
			continue
		yield line

import click

MANUAL = """
\b
Recognizes C-like #include instructions:
  #include <~/.config/include/...>
  #include "include_path_subdir/..."
  #include "optionally non existent file"!
NOTE: Appending "!" at the end will ignore errors if file does not exist.
WARNING: Have NO protection against recursive inclusion.

\b
Can execute shell commands for their output:
  #shell `...`
WARNING: May be subjected to shell injections!
"""

@click.command(epilog=MANUAL)
@click.option('-I', 'include_path', multiple=True)
@click.argument('filename', required=False)
def cli(filename=None, include_path=None):
	""" Very basic text file preprocessor.
	Runs on given file or stdin.
	Prints preprocessed result to stdout.
	"""
	include_path = include_path or []

	if not filename:
		for line in preprocess(sys.stdin, include_path=include_path):
			sys.stdout.write(line)
	else:
		content = ''
		try:
			with open(filename) as f:
				with CurrentDir(os.path.dirname(filename)):
					for line in preprocess(f, include_path=include_path):
						sys.stdout.write(line)
		except Exception as e:
			sys.stderr.write(str(e))
			sys.stderr.write('\n')

if __name__ == '__main__':
	cli()
