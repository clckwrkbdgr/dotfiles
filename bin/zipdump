#!/usr/bin/env python
import os, sys, io
import base64
import zipfile
import clckwrkbdgr.utils

# Metainfo line format:
# {length}|<reserved>|filename...

def dump_zip(archive, text):
    archive = zipfile.ZipFile(archive, 'r')
    for filename in archive.namelist():
        data = archive.read(filename)
        encoding = ''
        try:
            data = data.decode('utf-8')
            encoding = 'utf-8'
            data = data.encode('utf-8')
        except UnicodeError:
            data = base64.b64encode(data)
            encoding = 'base64'
        header = '{0}|{2}|{1}\n'.format(len(data), filename, encoding)
        text.write(header.encode('utf-8', 'surrogateescape'))
        text.write(data)
        text.write(b'\n') # Content separator
    archive.close()

def load_zip(text, archive):
    archive = zipfile.ZipFile(archive, 'w', zipfile.ZIP_DEFLATED)
    while True:
        line = text.readline()
        if not line:
            break
        size, encoding, filename = line.split(b'|', maxsplit=3)
        size = int(size)
        filename = filename[:-1] # Removing trailing linebreak.
        filename = filename.decode('utf-8', 'surrogateescape')
        data = text.read(size)
        if encoding == b'utf-8':
            try:
                data = data.encode('utf-8')
            except AttributeError:
                pass # Already bytes.
        elif encoding == b'base64':
            data = base64.b64decode(data)
        archive.writestr(filename, data)
        text.read(1) # Content separator
    archive.close()

import click

@click.group()
def cli():
    """ A tool to dump zip file content to text and load it back. """
    pass

@cli.command()
@click.argument('filename', required=False)
def dump(filename=None):
    """ Dumps zip file content converted to text to stdout.

    Expectes ZIP file name to dump content of.
    If not specified or "-", stdin is used.
    """
    bin_stdout = io.open(sys.stdout.fileno(), 'wb')
    with clckwrkbdgr.utils.fileinput(filename, 'rb') as f:
        # Fix for Windows: zip fails to seek on piped input.
        f = io.BytesIO(f.read())
        try:
            dump_zip(f, bin_stdout)
        except zipfile.BadZipFile as e:
            print('{0}: {1}'.format(filename, e), file=sys.stderr)
            sys.exit(1)

@cli.command()
@click.argument('filename', required=False)
def load(filename=None):
    """ Converts text representation of zip file to actual archive and sends to stdout.

    Expectes ZIP file to dump content to.
    If not specified or "-", stdout is used.
    """
    bin_stdout = io.open(sys.stdout.fileno(), 'wb')
    with clckwrkbdgr.utils.fileinput(filename, 'rb') as f:
        load_zip(f, bin_stdout)

if __name__ == "__main__":
    cli()
