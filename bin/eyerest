#!/usr/bin/python3
import subprocess
import datetime, time
import os
import sys

LAST_BREAK_TIMESTAMP = os.path.expanduser('~/.state/tm_last_break')
CURRENT_REST_TIMESTAMP = os.path.expanduser('~/.state/tm_currently_resting')
REST_TIME = 60 # seconds
WORK_TIME = 20 * 60 # seconds

def is_mplayer_running():
	for player in ['mpv', 'mplayer', 'avplay']:
		if 0 == os.system("ps -x | grep {0} | grep -qv grep".format(player)):
			return True
	return False

def is_power_cord_disconnected():
	return 0 == os.system("upower -i /org/freedesktop/UPower/devices/DisplayDevice 2>/dev/null | grep state | grep -q dis")

def is_screen_locked():
	return 0 == os.system("xscreensaver-command -time 2>/dev/null | grep -q 'screen locked since'")

def is_idle():
	idle_time = subprocess.Popen(["xprintidle"], stdout=subprocess.PIPE).communicate()[0]
	if idle_time:
		return int(idle_time) / 1000 >= 300
	return False

def toggle_redshift():
	os.system("pkill -USR1 redshift")

BRIGHTNESS = [0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]

def darken_screen():
	toggle_redshift()
	time.sleep(2) # Ugly hack to ensure xrandr darkening without redshift's interfering.
	for i in reversed(BRIGHTNESS):
		# TODO pick correct output automatically.
		os.system("xrandr --output eDP-1 --brightness {0}".format(i))
		time.sleep(.5)

def lighten_screen():
	for i in BRIGHTNESS:
		# TODO pick correct output automatically.
		os.system("xrandr --output eDP-1 --brightness {0}".format(i))
		time.sleep(.5)
	toggle_redshift()

# Returns:
#   None if resting.
#   float (0.0 ... 1.0) for passed working time if working
#   or activity function object if this activity is currently happening.
def eyerest():
	current_time = datetime.datetime.now().timestamp()

	if os.path.isfile(CURRENT_REST_TIMESTAMP):
		begin_rest_time = os.path.getmtime(CURRENT_REST_TIMESTAMP)
		rest_time = current_time - begin_rest_time
		if rest_time >= REST_TIME:
			os.remove(CURRENT_REST_TIMESTAMP)
			os.system("notification -t Pomodoro -i gdu-smart-healthy 'Now you can work again.'")
			lighten_screen()
		else:
			return None

	if is_mplayer_running():
		if os.path.isfile(LAST_BREAK_TIMESTAMP):
			os.remove(LAST_BREAK_TIMESTAMP)
		return is_mplayer_running
	elif is_power_cord_disconnected():
		if os.path.isfile(LAST_BREAK_TIMESTAMP):
			os.remove(LAST_BREAK_TIMESTAMP)
		return is_power_cord_disconnected
	elif is_screen_locked():
		if os.path.isfile(LAST_BREAK_TIMESTAMP):
			os.remove(LAST_BREAK_TIMESTAMP)
		return is_screen_locked
	elif is_idle():
		if os.path.isfile(LAST_BREAK_TIMESTAMP):
			os.remove(LAST_BREAK_TIMESTAMP)
		return is_idle

	if not os.path.isfile(LAST_BREAK_TIMESTAMP):
		open(LAST_BREAK_TIMESTAMP, 'w').close()
	last_break_time = os.path.getmtime(LAST_BREAK_TIMESTAMP)
	passed_time = current_time - last_break_time
	if passed_time >= WORK_TIME:
		os.system("notification -t Pomodoro -i gdu-smart-failing 'Take a break!'")
		darken_screen()
		os.remove(LAST_BREAK_TIMESTAMP)
		open(CURRENT_REST_TIMESTAMP, 'w').close()
		return None
	else:
		return passed_time / float(WORK_TIME)

if __name__ == "__main__":
	args = sys.argv[1:]
	quiet = False
	if '-q' in args:
		quiet = True
	if '--redshift' in args:
		toggle_redshift()
		sys.exit(0)
	if '-h' in args or '--help' in args:
		print("Usage: eyerest [-q] [--redshift]")
		print("   -q  - quiet mode (no text output, only notifications)")
		print("   --redshift  - toggle redshift on/off (can be used to fix incorrect state)")
		sys.exit(0)

	status = eyerest()

	if not quiet:
		if status is None:
			print('/////')
		elif status in [is_mplayer_running]:
			print("play")
		elif status == is_power_cord_disconnected:
			print("power")
		elif status == is_screen_locked:
			print("lock")
		elif status == is_idle:
			print("idle")
		else:
			dots = int(status * 6)
			print('.'*dots+' '*(5-dots))
