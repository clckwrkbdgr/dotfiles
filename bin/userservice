#!/usr/bin/env python
import platform
import types
import clckwrkbdgr.userservice
import click

class GroupWithNotRequiredBaseArgs(click.Group):
	""" Workaround for command groups that have some base arg, e.g.: 'prog <arg> <command>.
	In case when base arg is not required, value is still treated as argument instead of command: prog <command>
	This class detects commands in place of base arguments and restores commands. Arguments will be turned to None.

	Accepts arguments:
	- non_specific_commands: list of command names that may be invoked without base arguments.
	- base_args: list of all base arguments that can be ignored.
	"""
	def __init__(self, *args, **kwargs):
		self.non_specific_commands = kwargs.pop('non_specific_commands', [])
		self.base_args = kwargs.pop('base_args', [])
		super().__init__(*args, **kwargs)
	def parse_args(self, ctx, args, *other_args, **kwargs):
		result = super().parse_args(ctx, args, *other_args, **kwargs)
		if not ctx.protected_args:
			for base_arg in self.base_args:
				if base_arg in ctx.params and ctx.params[base_arg] in self.non_specific_commands:
					ctx.protected_args.insert(0, ctx.params[base_arg])
					ctx.params[base_arg] = None
		return result

@click.group(cls=GroupWithNotRequiredBaseArgs, base_args=['service_id'], non_specific_commands=['list'])
@click.argument('service_id')
@click.pass_context
def cli(ctx, service_id):
	""" Wrapper to control user-defined user-space services (daemons).

	Services are identified by their service id.
	"""
	ctx.obj = clckwrkbdgr.userservice.by_platform(platform.system())
	if service_id is None:
		return # Non-service-specific command.
	ctx.obj = ctx.obj(service_id)

@cli.command('list')
@click.pass_obj
def list_all(service_class):
	""" Displays status for all services. """
	for entry in service_class.list_all():
		print('[{1}] {0}'.format(
			entry.service_id,
			'+' if entry.started else '-',
			))

@cli.command()
@click.pass_obj
def status(service):
	""" Displays current status of the service.
	"""
	print('{0}: {1}'.format(service.id, service.display_name or ''))
	print('Installed: {1}'.format(service.id,
		'yes' if service.is_installed() else 'NO',
		))
	print('Running: {1}'.format(service.id,
		'yes' if service.is_started() else 'STOPPED',
		))

@cli.command()
@click.pass_obj
def install(service):
	""" Installs service.
	Does nothing is service is already installed.
	Does not start service: it should be done manually.
	"""
	if service.is_installed():
		return
	service.install()

@cli.command()
@click.pass_obj
def uninstall(service):
	""" Uninstalls installed service.
	Raises error is service is not installed.
	"""
	if not service.is_installed():
		raise RuntimeError("Service {0} is not installed, cannot uninstall.".format(service.id))
	if service.is_started():
		service.stop()
	service.uninstall()

@cli.command()
@click.pass_obj
def start(service):
	""" Attempts to start service.
	Does nothing if service is already started.
	"""
	if not service.is_started():
		service.start()

@cli.command()
@click.pass_obj
def restart(service):
	""" Attempts to restart service.
	Equivalent to consequent stop and start.
	"""
	if service.is_started():
		service.stop()
	service.start()

@cli.command()
@click.pass_obj
def stop(service):
	""" Attempts to stop service.
	Does nothing if service is not started.
	"""
	if service.is_started():
		service.stop()

if __name__ == '__main__':
	cli()
