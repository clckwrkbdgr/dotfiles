#!/usr/bin/env python
import logging
Log = logging.getLogger('backup')
import json
import inspect
try:
	from pathlib2 import Path
except ImportError: # pragma: py3 only
	from pathlib import Path
from clckwrkbdgr import utils
import clckwrkbdgr.backup
import clckwrkbdgr.logging
import clckwrkbdgr.backup.handlers.sevenzip

CONFIG_FILE_DESC = """\b
Syntax of config file (JSON):
	{
		"<root>" : {
			<backup context fields>
		},
		"<another root>": {
			...
		}
	}
"""

def process_location(root, settings):
	context = clckwrkbdgr.backup.Config(root=root, **settings)
	action = clckwrkbdgr.backup.handlers.sevenzip.SevenZipArchiver(context)

	Log.info('Archiving...')
	if not action.perform():
		return False
	Log.info('Checking...')
	if not action.check():
		return False
	Log.info('Copying archive to remote locations...')
	if not action.deploy():
		return False
	Log.info('Done.')
	return True

import click

@click.command(epilog=CONFIG_FILE_DESC + '\n\b\n' + inspect.getdoc(clckwrkbdgr.backup.Config))
@click.option('-v', '--verbose', is_flag=True, help='Print additional information.')
@click.option('-d', '--debug', is_flag=True, help='Print full debug information.')
@click.argument('config_file', type=Path)
@utils.exits_with_return_value
def cli(config_file, verbose=False, debug=False):
	""" Performs backup according to specified configuration.
	"""
	clckwrkbdgr.logging.init(Log, debug=debug, verbose=verbose)
	presets = json.loads(config_file.read_text(encoding='utf-8'))
	errors = 0
	for root, settings in presets.items():
		root = Path(root)
		if not root.is_absolute():
			root = config_file.parent/root
		if not process_location(root, settings):
			errors += 1
	return errors

if __name__ == '__main__':
	cli()
