#!/usr/bin/env python
import logging
import functools
logger = logging.getLogger('taskwarrior')
from clckwrkbdgr import utils
import clckwrkbdgr.taskwarrior
from clckwrkbdgr.taskwarrior import TaskWarrior, Config
import clckwrkbdgr.logging

import click, click_default_group
import clckwrkbdgr.click

@functools.lru_cache()
def get_taskwarrior():
	return TaskWarrior(Config.read_config())

@clckwrkbdgr.click.windows_noexpand_args
@click.group(cls=click_default_group.DefaultGroup, default='current', default_if_no_args=True)
@click.option('--debug', is_flag=True, help='Enables debug output.')
def cli(debug=False):
	""" Provides simple interface to manage user's task flow. """
	clckwrkbdgr.logging.init(logger, debug=debug)

@cli.command('current')
@utils.exits_with_return_value
def current_task():
	""" Displays current task. """
	if get_taskwarrior().get_current_task() is None:
		return False
	print(get_taskwarrior().get_current_task())
	return True

@cli.command('start')
@click.argument('task', required=False)
@utils.exits_with_return_value
def start_task(task=None):
	""" Starts given task.
	If task is not given, resumes previous task.
	"""
	return get_taskwarrior().start(task)

@cli.command('stop')
@utils.exits_with_return_value
def stop_task():
	""" Stops current task. """
	return get_taskwarrior().stop()

@cli.command('list')
@utils.exits_with_return_value
def list_history():
	""" Prints task execution history. """
	for entry in get_taskwarrior().get_history():
		print(entry)
	return True

@cli.command('fix')
@utils.exits_with_return_value
def fix_history():
	""" Provides interface to fix task history manually. """
	return get_taskwarrior().fix_history()

if __name__ == '__main__':
	cli()
