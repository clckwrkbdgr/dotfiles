#!/usr/bin/python3
# Searchs for dotfiles in current directory and prepares status string for bash prompt.
# Excludes some allowed dotfiles in homedir (mostly XDG-compliant).
# Recognizes some special dotfiles like .git*
import os, os.path, re, sys

EXPLAIN = (sys.argv[1] == 'explain') if len(sys.argv) > 1 else False

def explain_file(explanation, filename):
	if EXPLAIN:
		print("{0}: {1}".format(explanation, filename))

HOMEDIR_DOTFILES = """.bashrc
.profile
.config
.cache
.local
.projects
.haven
.ssh
""".splitlines()

HOMEDIR = os.path.expanduser("~")

TODO_DOTFILES = []
with open(os.path.join(HOMEDIR, ".config/bin/xdg"), "r") as f:
	for line in f:
		if 'TODO' in line:
			try:
				TODO_DOTFILES.append(line.split('TODO')[1].split(maxsplit=1)[0])
			except IndexError:
				pass

GIT_DOTFILES = """.gitignore
.gitattributes
.gitconfig
.gitmodules
""".splitlines()

unknown_files = 0
is_git = False
for filename in sorted(os.listdir(".")):
	if not filename.startswith("."):
		continue
	if os.getcwd() == HOMEDIR:
		if filename in HOMEDIR_DOTFILES:
			explain_file("allowed", filename)
			continue
		if filename in TODO_DOTFILES:
			explain_file("hardcoded", filename)
			continue
	if filename == '.git':
		explain_file("git", filename)
		if not EXPLAIN:
			print("[git]", end='')
		is_git = True
		continue
	if filename == '.parentlock':
		explain_file("parentlock", filename)
		if not EXPLAIN:
			print("[lck]", end='')
		is_git = True
		continue
	if is_git and filename in GIT_DOTFILES:
		explain_file("git", filename)
		continue
	explain_file("unknown", filename)
	unknown_files += 1

if unknown_files and not EXPLAIN:
	print("[.{0}]".format(unknown_files))
