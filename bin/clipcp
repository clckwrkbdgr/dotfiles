#!/usr/bin/env python
import os, sys, subprocess
import platform
import base64, binascii
try:
	from pathlib2 import Path
except ImportError:
	from pathlib import Path
import six

class WindowsClipboard:
	def copy(self, data):
		""" Copies byte data to clipboard. """
		assert type(data) is bytes
		import ctypes
		import ctypes.wintypes
		strcpy = ctypes.cdll.msvcrt.strcpy
		OpenClipboard = ctypes.windll.user32.OpenClipboard    # Basic clipboard functions
		EmptyClipboard = ctypes.windll.user32.EmptyClipboard
		GetClipboardData = ctypes.windll.user32.GetClipboardData
		SetClipboardData = ctypes.windll.user32.SetClipboardData
		SetClipboardData .argtypes = (ctypes.c_int, ctypes.wintypes.HGLOBAL)
		CloseClipboard = ctypes.windll.user32.CloseClipboard
		GlobalAlloc = ctypes.windll.kernel32.GlobalAlloc    # Global memory allocation
		GlobalAlloc.restype = ctypes.c_void_p
		GlobalLock = ctypes.windll.kernel32.GlobalLock     # Global memory Locking
		GlobalLock.argtypes = (ctypes.wintypes.HGLOBAL,)
		GlobalUnlock = ctypes.windll.kernel32.GlobalUnlock
		GlobalUnlock.argtypes = (ctypes.wintypes.HGLOBAL,)
		GMEM_DDESHARE = 0x2000

		OpenClipboard(None) # Open Clip, Default task
		EmptyClipboard()
		hCd = GlobalAlloc(GMEM_DDESHARE, len(data) + 1)
		pchData = GlobalLock(hCd)
		if pchData == 0:
			raise SystemError(ctypes.get_last_error())
		strcpy(ctypes.c_char_p(hCd), data)
		GlobalUnlock(hCd)
		SetClipboardData(1, hCd)
		CloseClipboard()
	def get(self):
		""" Extracts byte data from clipboard. """
		import ctypes
		import ctypes.wintypes
		strcpy = ctypes.cdll.msvcrt.strcpy
		OpenClipboard = ctypes.windll.user32.OpenClipboard    # Basic clipboard functions
		EmptyClipboard = ctypes.windll.user32.EmptyClipboard
		GetClipboardData = ctypes.windll.user32.GetClipboardData
		GetClipboardData.restype = ctypes.c_char_p # According to official Python ctypes documentation, called C function return the integer by default.
		SetClipboardData = ctypes.windll.user32.SetClipboardData
		CloseClipboard = ctypes.windll.user32.CloseClipboard
		GlobalAlloc = ctypes.windll.kernel32.GlobalAlloc    # Global memory allocation
		GlobalLock = ctypes.windll.kernel32.GlobalLock     # Global memory Locking
		GlobalUnlock = ctypes.windll.kernel32.GlobalUnlock
		GMEM_DDESHARE = 0x2000

		OpenClipboard(None) # Open Clip, Default task
		pcontents = GetClipboardData(1) # 1 means CF_TEXT.. too lazy to get the token thingy...
		data = ctypes.c_char_p(pcontents).value
		#GlobalUnlock(pcontents) ?
		CloseClipboard()
		return data

class LinuxClipboard:
	def copy(self, data):
		""" Copies byte data to clipboard. """
		assert type(data) is bytes
		os.system('xclipsync')
		xclip = subprocess.Popen(['xclip', '-i', '-selection', 'clipboard'], stdin=subprocess.PIPE)
		xclip.communicate(input=data)
		xclip.wait()
	def get(self):
		""" Extracts byte data from clipboard. """
		os.system('xclipsync')
		try:
			return subprocess.check_output(['xclip', '-o'])
		except subprocess.CalledProcessError as e:
			print(e, file=sys.stderr)
			return b''

if platform.system() == 'Windows':
	Clipboard = WindowsClipboard
else:
	Clipboard = LinuxClipboard

def copy_file(filename, use_base64=False):
	""" Copies given file to clipboard.
	If use_base64 is True, forces base64 encoding with corresponding marker.
	Returns CRC of original (not encoded) file content.
	"""
	filename = Path(filename)
	data = b''
	data += filename.name.encode('cp1251')
	data += b'\n'
	content = filename.read_bytes()
	crc = hex(binascii.crc32(content))[2:]
	if use_base64:
		content = base64.b64encode(content)
	if use_base64:
		data += b'base64\n'
	data += crc.encode('ascii') + b'\n'
	data += content
	Clipboard().copy(data)
	return crc

def dump_file(force_expect_base64=False):
	""" Extracts file data from clipboard and saves under corresponding
	filename in currend directory.
	If force_expect_base64 is True, then expects file to be encoded
	using base64, otherwise prints warning.
	Returns pair: <filename, CRC of saved data>
	"""
	output = Clipboard().get()
	filename, crc, content = output.split(b'\n', 2)
	use_base64 = False
	if crc == b'base64':
		use_base64 = True
		crc, content = content.split(b'\n', 1)
	if force_expect_base64 and not use_base64:
		print('Expected base64 explicitly, but did not found base64 marker in data!', file=sys.stderr)
	filename = filename.decode('utf-8').encode('latin1').decode('cp1251')
	filename = Path(filename)

	if use_base64:
		content = base64.b64decode(content)
	mycrc = hex(binascii.crc32(content))[2:].encode('ascii')
	if mycrc != crc:
		content = content.replace(b'\n', b'\r\n')
		mycrc = hex(binascii.crc32(content))[2:].encode('ascii')
	if mycrc != crc:
		print('CRC do not match!', file=sys.stderr)
		print('Incoming (expected): {0}'.format(crc), file=sys.stderr)
		print('Actual: {0}'.format(mycrc), file=sys.stderr)
	filename.write_bytes(content)
	return filename, mycrc

import click

@click.command()
@click.option('--base64', 'use_base64', is_flag=True)
@click.argument('filename', required=False)
def cli(filename, use_base64=False):
	""" Implements file transfer protocol via clipboard of remote connection,
	e.g. RDP.
	If filename is specified, copies its content into clipboard with corresponding metadata.
	If filename is omitted, tries to extract file with metadata from clipboard and save it in current directory.

	Most common scenario:
	- Have two systems: host system and remote (which is connected via RDP).
	- In any of the system: `clipcp filename`.
	- In another system: `clipcp`
	"""
	if filename is not None:
		print(filename, file=sys.stderr)
		crc = copy_file(filename, use_base64=use_base64)
		print(crc, file=sys.stderr)
		return
	filename, crc = dump_file(force_expect_base64=use_base64)
	print(filename, file=sys.stderr)
	print(crc, file=sys.stderr)

if __name__ == '__main__':
	cli()
