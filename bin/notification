#!/bin/bash
. "$XDG_CONFIG_HOME/lib/utils.bash"
. "$XDG_CONFIG_HOME/lib/click.bash"
. "$XDG_CONFIG_HOME/lib/miniclick.bash"

MESSAGES_TO_STORE=20 # To store in message log.
MESSAGE_LOG_FILE="${XDG_STATE_HOME:-$HOME/.state}/notification.log"
MAX_VOLUME=60 # After that volume will be decreased for the time of notification.

display_notification() { miniclick title text --icon -- "$@"
	# Display normal floating notification.
	notify-send "$title" "$text" --icon="$icon"
}

display_fixed_notification() { miniclick title text --icon -- "$@"
	# Display sticky floating notification (top-left corner of the screen).
	if which aosd_cat >/dev/null; then
		echo "$text" | aosd_cat -x 0 -y -745 --padding 2 --shadow-offset 0 \
			--transparency 0 --back-opacity 255 --back-color black --fore-color orange \
			--fade-in 0 --fade-full 1500 --fade-out 0
	else
		# Workaround for xfce4-notifyd: kill previous notification popup to display new one in its place.
		wmctrl -l | grep xfce4-notifyd | awk '{print $1}' | while read wnd_id; do
			xdotool windowkill "$wnd_id"
		done
		notify-send "$title" "$text" --icon="$icon"
	fi
}

parse_special_tags() { miniclick text -- "$@"
	# Parses special tags in notification text.
	# May modify variables in current context (including $text)
	while startswith "$text" '['; do
		tag="$(echo "$text" | sed 's/^\[\([^]]*\)\].*/\1/')"
		if [ "$tag" == 'P' ]; then
			quiet=
		fi
		text="$(echo "$text" | sed 's/^\[[^]]*\]//')"
	done
}

click::command cli 'Displays notification pop-up, plays signal sound and reads message aloud.'
click::epilog      "Also stores last $MESSAGES_TO_STORE messages in log."
click::epilog      "If message starts with word enclosed in brackets, the content is treated as special tag."
click::epilog      "Currently recognized tags:"
click::epilog      "- [P]: override quiet mode even if it was requisted on command line."
click::epilog      "Tags are removed from text."
click::flag '-l' "" 'list_log' --help="Prints previous $MESSAGES_TO_STORE messages."
click::flag '-q' "" 'quiet' --help="quiet mode (no sounds/voice)."
click::flag '-f' "--fixed" '' --help="Fixed position. Replaces previous notification if it is still displayed."
click::flag '-N' "--no-history" 'no_history' --help="Do not store this notification in history."
click::option '-t' "" 'title' --default='notification' --help="Optional title."
click::option '-i' "" 'icon' --help="Optional icon."
click::argument 'text' --default='' --help="Message to display."
cli() {
	if [ "${CLICK_ARGS[list_log]}" ]; then
		if [ -n "${CLICK_ARGS[text]}" ]; then
			panic "ERROR: Option -l cannot be used with other options."
		fi
		cat "$MESSAGE_LOG_FILE"
		exit 0
	fi
	quiet="${CLICK_ARGS[quiet]}"
	title="${CLICK_ARGS[title]}"
	icon="${CLICK_ARGS[icon]}"
	text="${CLICK_ARGS[text]}"

	parse_special_tags "$text"

	if [ -z "$quiet" ]; then
		prev_volume="$(volume)"
		if [ "$prev_volume" -gt "$MAX_VOLUME" ]; then
			volume "$MAX_VOLUME"
			finally "volume '$prev_volume'"
		fi
	fi

	[ -z "$quiet" ] && play_signal &

	if [ -n "$text" ]; then
		if [ -n "${CLICK_ARGS[fixed]}" ]; then
			display_fixed_notification "$title" "$text" --icon="$icon" &
		else
			display_notification "$title" "$text" --icon="$icon" &
		fi

		if [ -z "${CLICK_ARGS[no_history]}" ]; then
			echo "$(date) <${title}> $text" >>"$MESSAGE_LOG_FILE"
			truncate_logfile "$MESSAGE_LOG_FILE" "$MESSAGES_TO_STORE"
		fi

		[ -z "$quiet" ] && text-to-speech "$text"
	fi
}

click::run "$@"
