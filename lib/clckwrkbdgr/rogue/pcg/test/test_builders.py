import unittest
unittest.defaultTestLoader.testMethodPrefix = 'should'
import textwrap
from .. import builders
from ...math import Point, Size
from .._base import RNG
from .. import _base as pcg

class MockBuilder(builders.Builder):
	def _build(self):
		for x in range(self.size.width):
			self.strata.set_cell(x, 0, 'wall')
			self.strata.set_cell(x, self.size.height - 1, 'wall')
		for y in range(self.size.height):
			self.strata.set_cell(0, y, 'wall')
			self.strata.set_cell(self.size.width - 1, y, 'wall')
		for x in range(1, self.size.width - 1):
			for y in range(1, self.size.height - 1):
				self.strata.set_cell(x, y, 'floor')
		floor_only = lambda pos: self.strata.cell(pos.x, pos.y) == 'floor'
		obstacle_pos = pcg.pos(self.rng, self.size, floor_only)
		self.strata.set_cell(obstacle_pos.x, obstacle_pos.y, 'wall')
		self.start_pos = pcg.pos(self.rng, self.size, floor_only)
		self.exit_pos = pcg.pos(self.rng, self.size, floor_only)

class MockCell:
	def __init__(self, sprite, passable=True):
		self.sprite = sprite
		self.passable = passable
	def __str__(self):
		return self.sprite

class TestBuilder(unittest.TestCase):
	def should_generate_dungeon(self):
		rng = RNG(0)
		builder = MockBuilder(rng, Size(20, 20))
		builder.add_cell_type(None, ' ')
		builder.add_cell_type('wall', MockCell, "#", passable=False)
		builder.add_cell_type('floor', ".")
		builder.build()
		self.assertEqual(builder.start_pos, Point(9, 12))
		self.assertEqual(builder.exit_pos, Point(7, 16))
		self.maxDiff = None
		expected = textwrap.dedent("""\
				####################
				#..................#
				#..................#
				#..................#
				#..................#
				#..................#
				#..................#
				#..................#
				#..................#
				#..................#
				#..................#
				#..................#
				#..................#
				#.....#............#
				#..................#
				#..................#
				#..................#
				#..................#
				#..................#
				####################
				""")
		self.assertEqual(builder.strata.tostring(), expected)

class TestRogueDungeon(unittest.TestCase):
	def should_generate_rogue_dungeon(self):
		rng = RNG(1)
		builder = builders.RogueDungeon(rng, Size(80, 25))
		builder.add_cell_type(None, ' ')
		builder.add_cell_type('corner', "+")
		builder.add_cell_type('wall_h', "-")
		builder.add_cell_type('wall_v', "|")
		builder.add_cell_type('floor', ".")
		builder.add_cell_type('passage', "#")
		builder.add_cell_type('door', "+")
		builder.build()
		self.assertEqual(builder.start_pos, Point(37, 13))
		self.assertEqual(builder.exit_pos, Point(18, 11))
		self.maxDiff = None
		expected = textwrap.dedent("""\
				_                          +----------------------+                            _
				_  +-------------+         |......................| +-------------+            _
				_  |.............+#######  |......................|#+.............|            _
				_  |.............|      ###+......................+#|.............|            _
				_  |.............|         +---------------------++ |.............|            _
				_  +------+------+                               #  +-------------+            _
				_         ##############      ####################                             _
				_                      #      #                                                _
				_                      #      #                       +--------------------+   _
				_              +-------++    ++------------------+    |....................|   _
				_              |........|    |...................+####+....................|   _
				_              |........|    |...................|    |....................|   _
				_              |........|    |...................|    +-----+--------------+   _
				_              |........|    |...................|          ######             _
				_              +---+----+    ++------------------+               #             _
				_              #####          ####################               #             _
				_      +-------+--+               +--------------++   +----------+----------+  _
				_      |..........|               |...............| ##+.....................|  _
				_      |..........|               |...............| # |.....................|  _
				_      |..........|               |...............+## |.....................|  _
				_      |..........|               |...............|   |.....................|  _
				_      |..........|               |...............|   |.....................|  _
				_      +----------+               +---------------+   +---------------------+  _
				_                                                                              _
				_                                                                              _
				""").replace('_', ' ')
		self.assertEqual(builder.strata.tostring(), expected)
	def should_generate_small_rogue_dungeon(self):
		rng = RNG(0)
		builder = builders.RogueDungeon(rng, Size(11, 11))
		builder.add_cell_type(None, ' ')
		builder.add_cell_type('corner', "+")
		builder.add_cell_type('wall_h', "-")
		builder.add_cell_type('wall_v', "|")
		builder.add_cell_type('floor', ".")
		builder.add_cell_type('passage', "#")
		builder.add_cell_type('door', "+")
		builder.build()
		self.assertEqual(builder.start_pos, Point(9, 4))
		self.assertEqual(builder.exit_pos, Point(9, 8))
		self.maxDiff = None
		expected = textwrap.dedent("""\
				+--+--+---+
				|..|+.|...|
				|..+..|...|
				+--+--+-+-+
				|..+..|.+.|
				|..|..|...|
				+--++-++--+
				|..++.+.+.|
				|..|..|+..|
				|..|..|...|
				+--+--+---+
				""")
		self.assertEqual(builder.strata.tostring(), expected)

class TestBSPDungeon(unittest.TestCase):
	def should_generate_bsp_dungeon(self):
		rng = RNG(0)
		builder = builders.BSPDungeon(rng, Size(80, 25))
		builder.add_cell_type(None, ' ')
		builder.add_cell_type('wall', '#')
		builder.add_cell_type('floor', ".")
		builder.build()
		self.assertEqual(builder.start_pos, Point(31, 20))
		self.assertEqual(builder.exit_pos, Point(29, 2))
		self.maxDiff = None
		expected = textwrap.dedent("""\
				################################################################################
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#........................#.................#
				#...........................#........................#.......#............#....#
				#................#..................#................#.......#............#....#
				#................#..........#.......#................#....................#....#
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#................#.......#............#....#
				####################################################.###########################
				#..............#.....#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#....................#..............#.#
				#..............#.....#.............#.....#.......#....................#......#.#
				#..............#.....#.............#.............#............#.......#......#.#
				#..............#.........................#.......#............#.......#......#.#
				#....................#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#.......#............#.......#......#.#
				##########################################.###################################.#
				#...........#.....#........#...............#...........#......#........#.....#.#
				#...........#.....#........#...............#...........#......#........#.......#
				#...........#..............#...............#...........#.....................#.#
				#.................#...........................................#........#.....#.#
				#...........#.....#........#...............#...........#......#........#.....#.#
				################################################################################
				""")
		self.assertEqual(builder.strata.tostring(), expected)

class TestCaveDungeon(unittest.TestCase):
	def should_generate_cave_dungeon(self):
		rng = RNG(0)
		builder = builders.CaveBuilder(rng, Size(80, 25))
		builder.add_cell_type(None, ' ')
		builder.add_cell_type('wall', '#')
		builder.add_cell_type('floor', ".")
		builder.build()
		self.assertEqual(builder.start_pos, Point(51, 2))
		self.assertEqual(builder.exit_pos, Point(52, 3))
		self.maxDiff = None
		expected = textwrap.dedent("""\
				################################################################################
				########.#######......####..........#.........###########...#.#...............##
				#...###....####................................##...###........................#
				#....####...#..........##......................##..............................#
				#............................#.....#...........................................#
				#..............#............###...###........................##....####........#
				#...........####............##....####...####.......#####.........######......##
				#...........####............##....###...#######....#######........#######.....##
				#...........###...........##.......##...########...................######....###
				##.....................###..............#######...............#....######....###
				####..................####..............####.........................###......##
				####...................#................##....................................##
				#####.............#................##.......................................#.##
				####..............................####......................................#.##
				##......###.........#.#............###.......................##................#
				#.......####........#####.#.##.....####....................####................#
				#.......####........############....###....................###................##
				#.......#####........##########......###..............#.......................##
				#......#####.........#######.........##...##.................................###
				#....#######..........#####..........###..##..................................##
				#...######.............##.................##..................................##
				#....###...............#......##....###...###..................................#
				#............................####.........####.................................#
				##............#####...##....############.#######..###......###................##
				################################################################################
				""")
		self.assertEqual(builder.strata.tostring(), expected)

class TestMazeDungeon(unittest.TestCase):
	def should_generate_maze(self):
		rng = RNG(0)
		builder = builders.MazeBuilder(rng, Size(80, 25))
		builder.add_cell_type(None, ' ')
		builder.add_cell_type('wall', '#')
		builder.add_cell_type('floor', ".")
		builder.build()
		self.assertEqual(builder.start_pos, Point(42, 5))
		self.assertEqual(builder.exit_pos, Point(65, 11))
		self.maxDiff = None
		expected = textwrap.dedent("""\
				################################################################################
				#.#.......#.......#.......#.....................#...#.....#...#...#.....#...#.##
				#.#.#.#.###.#####.#.#.###.#.###################.#.###.#####.#.#.#.#.#####.#.#.##
				#...#.#.....#...#.#.#.#.#.#.........#...........#...#.......#...#...#.....#...##
				###.#.#.#######.#.###.#.#.#########.#############.#.###############.#.##########
				#.#.#.#.......#.#.....#...#.......#...............#.#...#...........#.....#...##
				#.#.#.#######.#.#.#.#######.#####.#######.#########.#.#.#.#####.#####.#.#.#.####
				#.#.#...#...#.#...#...#.#...#...#.......#.#.#.....#...#.#.....#.#.....#.#.#...##
				#.#.#.###.#.#.#####.#.#.#.#####.#########.#.#.#########.#.###.###.#.#.#.#.###.##
				#...#...#.#.#.#...#.#...#.........#.........#.........#.#...#.....#.#.#.#.....##
				###.###.#.#.#.#.#.#.#.###########.#.#.#########.###.###.#############.#.########
				#.#.#.#.#.#...#.#...#...#...#.....#.#...#.....#...#.#.................#...#...##
				#.#.#.#.#.#############.#.#.#.#####.###.#.###.#.#.#.#.###########.#######.#.#.##
				#...#...#.......#.....#...#...#.....#...#...#.#.#.#...#...#.....#.#.......#.#.##
				#.#######.#.###.#.###.#########.###########.#.#.#.#####.#.#####.#.#.###.###.#.##
				#.#.......#.#...#.#...#...............#...#.#.#.#.#.....#.#...#...#...#.....#.##
				###.#######.#.###.#.#.#######.#######.#.#.#.#.#.#.#####.#.#.#.##################
				#.#.#.....#.#...#.#.#...............#.#.#.#.#.#.#.......#...#.#...............##
				#.#.#.###.#.###.###.#.###############.#.#.#.#.#.#.#############.#######.#####.##
				#...#...#.#...#.....#.#...#.......#...#.#.#.#.#.#...............#.#.....#.....##
				###.###.#.###########.#.###.#####.#.###.#.###.#.#################.#.#####.######
				#...#...#.#.........#.....#.#.....#...#.#.....#...#.........#...#...#...#.....##
				#.#######.#.###.#####.###.#.#########.#.#########.#.###.#####.#.#####.#.#.###.##
				#.........#...#.......#...#...........#...........#...#.......#.......#...#...##
				################################################################################
				""")
		self.assertEqual(builder.strata.tostring(), expected)
