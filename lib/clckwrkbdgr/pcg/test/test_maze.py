from clckwrkbdgr import unittest
import textwrap
from clckwrkbdgr.math import Size, Point, Matrix
from .._base import RNG
from .. import maze

class TestMaze(unittest.TestCase):
	def should_generate_maze(self):
		rng = RNG(0)
		builder = maze.Maze(rng, Size(80, 25))
		layout = builder.build()
		self.maxDiff = None
		expected = textwrap.dedent("""\
				.#.....#.#.....#.......#...#...#...#...#.....#...#...........#.....#...#...#.
				.#.#.#.#.#.###.#.#####.#.#.#.#.#.#.###.#.###.#.###.#########.#.###.###.#.#.#.
				...#.#.#.....#.....#.#.#.#.#.#.#.#.#...#...#.......#.........#.#...#...#.#.#.
				.#.#.#.###########.#.#.#.#.###.#.#.#.###.#.#######.#.###########.###.###.#.#.
				.#.#.#.......#.....#...#.#...#...#.#.....#.#.....#.#...#...#.............#.#.
				##.#.#######.#.#####.###.###.#.###.#######.#.#####.###.#.###.###.#########.#.
				...#.#.#...#.#.....#.#.#.#.#...#.#.....#.#.#.....#.#...#...#.#...#...#.....#.
				.#.#.#.#.#.#.#####.#.#.#.#.#.###.#.###.#.#.#####.#.#.#####.#.#####.#.#######.
				.#.#.#.#.#.#.......#.#.#.#...#.......#.#.#.#.....#.#.#...#.#.......#.#.......
				.#.#.#.#.#.#.#######.#.#.#########.###.#.#.#.#####.#.###.#.#########.#.#####.
				.#.#.#.#.#...#.....#.....#.#.....#...#...#.#.....#.#.#...#...#.......#.....#.
				##.#.#.#.#####.###.#######.#.###.#.#.#####.#####.#.#.#.#.#.#.#.#########.#.##
				...#...#.#...#.#.......#...#...#.#.#.....#.......#.#.#.#.#.#...#.........#...
				.#######.#.###.#.#####.#.#####.###.#####.#.###.###.#.#.#.#.#################.
				.#.......#.....#.....#.#.....#.....#...#.#.#.#...#.#.#.#.#.........#...#.#...
				##.#########.#######.#.###.#.#########.#.#.#.###.#.#.#.###.#######.#.#.#.#.##
				.#.#.........#.#...#.#...#.#.....#.....#.#.#.....#.#.....#...#...#.#.#.#...#.
				.#.###.#######.#.#.#####.#.#####.###.#.#.#.#.#####.#####.#.#.#.###.#.#.#.#.#.
				.....#.......#.#.#.....#.#.....#.....#.#.#.#.#...#.....#.#.#.#...#.#.#...#.#.
				.###.#######.#.#.###.#.#.#.#############.#.###.#.#####.#.#.#.#.#.#.#.#.###.#.
				...#.......#...#.#.#.#.#.#...#...........#...#.#...#...#.#.#.#.#.#...#...#.#.
				##.###.#.#.#####.#.#.###.###.#.#.#########.#.###.#.#.###.###.#.#.#########.#.
				...#...#.#.........#.......#...#...........#.....#.#...#.....#.#.............
				""")
		self.assertEqual(layout.tostring(lambda c:'.' if c else '#'), expected)
	def should_generate_maze_without_hanging(self):
		rng = RNG(2087627623)
		builder = maze.Maze(rng, Size(80, 23))
		layout = builder.build()
		self.maxDiff = None
		expected = textwrap.dedent("""\
				...................#...#.........#.#.....#...#...........#.#...#.........#...
				.#################.#.#.#.#######.#.#.###.###.#.#.#######.#.#.#.###.###.###.#.
				...#.....#...#.....#.#.#.#...#.#.#.#.#.#.....#.#.#.....#.....#...#...#.....#.
				##.#.###.#.###.#####.###.###.#.#.#.#.#.#######.#.#.#######.#####.###.#######.
				...#.#...#.....#...#.....#...#...#...#.#.......#.#.....#...#...#.....#...#...
				.###.#.#########.#.#####.#.###.#.###.#.#.#############.#.#.#.#########.#.#.##
				...#.#.......#...#.......#.....#...#.#.#...............#.#.#...........#.#.#.
				##.#.#####.#.#.#####################.#.###.#######.#####.#.#########.#####.#.
				...#.#.....#.#.......#.....#...........#...#.......#.#...#.#.......#.......#.
				.###.#.#.###########.#.#.#.#.###########.###.#.#####.#.#####.#####.#########.
				.....#.#.....#...#.#.#.#.#.#.............#...#.......#.......#.......#.......
				######.#####.#.#.#.#.###.#.#######.#######################.#########.#.###.##
				.....#.#.#.....#.....#...#.......#...#.....#...........#...#...........#.#.#.
				.#####.#.#.###########.###########.#.#.###.#.#####.###.#####.###.#.###.#.#.#.
				...#...#...#.....#.....#.#.........#.#.#.#.......#...#.#.....#...#.#.#.#...#.
				##.#.#.#.#######.#.#####.#.###.#######.#.#############.#.#########.#.#.#####.
				...#.#.#...............#...#...#.......#...........#...#.........#.#.#.#.....
				.###.#####.###########.#####.###.#######.#########.#.#########.#.#.#.#.#.###.
				...#.....#.#...#...#.#.#.....#...#.....#.#.#.....#.#.....#.....#.#.#.#.#...#.
				.#####.#.#.#.#.#.#.#.#.#.#########.#####.#.#.###.#.#####.#.#####.#.#.#.###.#.
				.......#.#...#...#...#.....................#...#.........#.....#.#...#.....#.
				""")
		self.assertEqual(layout.tostring(lambda c:'.' if c else '#'), expected)
	def should_not_skip_fringe_rows_in_odd_height_mazes(self):
		rng = RNG(856411207)
		builder = maze.Maze(rng, Size(21, 9))
		layout = builder.build()
		self.maxDiff = None
		expected = textwrap.dedent("""\
				...#.........#.....
				.#.#.#######.#.####
				.#.#.#.....#.......
				.###.#.###.###.###.
				.#...#...#.#...#...
				.#.#####.#.#####.#.
				...#.....#.......#.
				""")
		self.assertEqual(layout.tostring(lambda c:'.' if c else '#'), expected)
