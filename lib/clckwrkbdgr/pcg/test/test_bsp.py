from clckwrkbdgr import unittest
import textwrap
from clckwrkbdgr.math import Size, Point, Matrix
from .._base import RNG
from .. import bsp

class TestBSP(unittest.TestCase):
	def _make_room(self, field, topleft, bottomright, is_horizontal, door_pos):
		for x in range(topleft.x, bottomright.x + 1):
			for y in range(topleft.y, bottomright.y + 1):
				field.set_cell((x, y), '.')
		if is_horizontal:
			the_divide = door_pos.x
			for y in range(topleft.y, bottomright.y + 1):
				field.set_cell((the_divide, y), '#')
		else:
			the_divide = door_pos.y
			for x in range(topleft.x, bottomright.x + 1):
				field.set_cell((x, the_divide), '#')
		field.set_cell(door_pos, '+')
	def _fill(self, field, size):
		for x in range(size.width):
			field.set_cell((x, 0), '#')
			field.set_cell((x, size.height - 1), '#')
		for y in range(size.height):
			field.set_cell((0, y), '#')
			field.set_cell((size.width - 1, y), '#')
	def should_generate_bsp(self):
		rng = RNG(0)
		size = Size(80, 25)
		field = Matrix(size, ' ')
		self._fill(field, size)

		partition = bsp.BinarySpacePartition(rng)
		for splitter in partition.generate(Point(1, 1), Point(size.width - 2, size.height - 2)):
			self._make_room(field, *splitter)

		self.maxDiff = None
		expected = textwrap.dedent("""\
				################################################################################
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#................+.......#............+....#
				#................+..........#.......+................#.......#............#....#
				#................#..........+.......#................#.......#............#....#
				#................#..........#.......#................#.......+............#....#
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#................#.......#............#....#
				####################################################+###########################
				#..............#.....#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#.......+............#.......+......#.#
				#..............#.....#.............#.....#.......#............+.......#......#.#
				#..............#.....#.............#.....+.......#............#.......#......#.#
				#..............#.....+.............+.....#.......#............#.......#......#.#
				#..............+.....#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#.......#............#.......#......#.#
				##########################################+###################################.#
				#...........#.....#........#...............#...........#......#........#.....#.#
				#...........#.....#........#...............#...........#......#........#.....+.#
				#...........#.....+........#...............#...........#......+........+.....#.#
				#...........+.....#........+...............+...........+......#........#.....#.#
				#...........#.....#........#...............#...........#......#........#.....#.#
				################################################################################
				""")
		self.assertEqual(field.tostring(), expected)
	def should_generate_bsp_with_spacey_rooms(self):
		rng = RNG(0)
		size = Size(80, 25)
		field = Matrix(size, ' ')
		self._fill(field, size)

		partition = bsp.BinarySpacePartition(rng, min_width=5, min_height=5)
		partition.set_unfit_both_dimensions(True)
		for splitter in partition.generate(Point(1, 1), Point(size.width - 2, size.height - 2)):
			self._make_room(field, *splitter)

		self.maxDiff = None
		expected = textwrap.dedent("""\
				################################################################################
				#..........#....................#......................................#.......#
				#..........#....................#......................................#.......#
				#..........#....................+......................................#.......#
				#..........#....................#......................................#.......#
				#..........+....................#......................................+.......#
				#..........#....................#......................................#.......#
				#..........#....................#......................................#.......#
				#..........#....................#......................................#.......#
				####################################################+###########################
				#............#.......#......#..................................................#
				#............#.......#......#..................................................#
				#............#.......+......#..................................................#
				#............#.......#......#..................................................#
				#............#.......#......#..................................................#
				#............+.......#......#..................................................#
				#............#.......#......+..................................................#
				#............#.......#......#..................................................#
				######################+#########################################################
				#..............................................................................#
				#..............................................................................#
				#..............................................................................#
				#..............................................................................#
				#..............................................................................#
				################################################################################
				""")
		self.assertEqual(field.tostring(), expected)
