#!/usr/bin/python3
import subprocess
import datetime
import os
import sys

LAST_BREAK_TIMESTAMP = '/tmp/tm_last_break'
CURRENT_REST_TIMESTAMP = '/tmp/tm_currently_resting'

def is_mplayer_running():
	return 0 == os.system("ps -x | grep mplayer | grep -qv grep")

def is_power_cord_disconnected():
	return 0 == os.system("upower -i /org/freedesktop/UPower/devices/DisplayDevice | grep state | grep -q dis")

def is_screen_locked():
	return 0 == os.system("xscreensaver-command -time | grep -q 'screen locked since'")

def is_idle():
	idle_time = subprocess.Popen(["xprintidle"], stdout=subprocess.PIPE).communicate()[0]
	return int(idle_time) / 1000 >= 300

def eyerest():
	current_time = datetime.datetime.now().timestamp()

	if os.path.isfile(CURRENT_REST_TIMESTAMP):
		begin_rest_time = os.path.getmtime(CURRENT_REST_TIMESTAMP)
		rest_time = current_time - begin_rest_time
		if rest_time >= 60:
			os.remove(CURRENT_REST_TIMESTAMP)
			os.system("notify-send Pomodoro '<i>Now you can work again.</i>' --icon=gdu-smart-healthy")
			os.system("alert")
		else:
			print("/////")
			return

	if is_mplayer_running():
		if os.path.isfile(LAST_BREAK_TIMESTAMP):
			os.remove(LAST_BREAK_TIMESTAMP)
		print("play")
		return
	elif is_power_cord_disconnected():
		if os.path.isfile(LAST_BREAK_TIMESTAMP):
			os.remove(LAST_BREAK_TIMESTAMP)
		print("power")
		return
	elif is_screen_locked():
		if os.path.isfile(LAST_BREAK_TIMESTAMP):
			os.remove(LAST_BREAK_TIMESTAMP)
		print("lock")
		return
	elif is_idle():
		if os.path.isfile(LAST_BREAK_TIMESTAMP):
			os.remove(LAST_BREAK_TIMESTAMP)
		print("idle")
		return

	if not os.path.isfile(LAST_BREAK_TIMESTAMP):
		open(LAST_BREAK_TIMESTAMP, 'w').close()
	last_break_time = os.path.getmtime(LAST_BREAK_TIMESTAMP)
	passed_time = current_time - last_break_time
	if passed_time >= 1200:
		os.system("notify-send Pomodoro '<b>Take a break!</b>' --icon=gdu-smart-failing")
		os.system("alert")
		os.remove(LAST_BREAK_TIMESTAMP)
		open(CURRENT_REST_TIMESTAMP, 'w').close()
		print("/////")
	else:
		dots = int(passed_time * 6 / 60 / 20)
		print('.'*dots+' '*(5-dots))

def binclock():
	jn = lambda x: zip(*(iter(x),)*2)
	now = datetime.datetime.now()
	h, m, D, M, Y = now.time().hour, now.time().minute, now.date().day, now.date().month, now.date().year
	columns = [
			bin(h)[2:].zfill(6),
			bin(m)[2:].zfill(6),
			'0' * 6,
			bin(D)[2:].zfill(6),
			bin(M)[2:].zfill(6),
			bin(Y%100)[2:].zfill(6)[:6]
			]
	chars = {
			'0000': ' ',
			'0001': '\u2597',
			'0010': '\u2596',
			'0011': '\u2584',
			'0100': '\u259D',
			'0101': '\u2590',
			'0110': '\u259E',
			'0111': '\u259F',
			'1000': '\u2598',
			'1001': '\u259A',
			'1010': '\u258C',
			'1011': '\u2599',
			'1100': '\u2580',
			'1101': '\u259C',
			'1110': '\u259B',
			'1111': '\u2588',
			}
	chars2 = {'00':'\u25EB', '01':'\u25E8', '10':'\u25E7', '11':'\u25A0'}
	print(''.join([chars[''.join(first + second)] for first, second in zip(jn(columns[0]), jn(columns[1]))]))
	print(''.join([chars2[''.join(value)] for value in jn(columns[3])]))
	print(''.join([chars[''.join(first + second)] for first, second in zip(jn(columns[4]), jn(columns[5]))]))

args = sys.argv[1:]
if args:
	if args[0] == "eyerest":
		eyerest()
	elif args[0] == "binclock":
		binclock()
	elif args[0] == "singleshot":
		os.system("pomodoro --single-shot")
	elif args[0] == "isodate":
		print(datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S'))
