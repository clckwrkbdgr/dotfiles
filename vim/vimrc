set nocompatible " Reset many settings; should be at the very first line.

set backupdir=~/.cache/vim,~/,/tmp
if has('win32')
  set directory=$TEMP,c:\tmp,c:\temp,.
  set viminfo='100,<50,s10,h,rA:,rB:,n$TEMP/viminfo
endif
if !has('win32')
	set directory=~/.cache/vim/,/var/tmp//,.,/tmp//
endif
if !has('win32')
  set shell=bash
  if v:version > 600
     set viminfo='100,<50,s10,h,n~/.cache/vim/viminfo
  else
     set viminfo='100,h,n~/.cache/vim/viminfo
  endif
endif
set runtimepath+=~/.config/vim
set runtimepath+=~/.config/vim/after
if has('win32')
   let g:netrw_home=$USERPROFILE.'/.cache/vim'
endif
if !has('win32')
   let g:netrw_home=$XDG_CACHE_HOME.'/vim'
endif

autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |   exe "normal g`\"" | endif
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.tilespec,*.spec set filetype=dosini

" Remap Ctrl-J as Escape for: normal, insert, operator (y, d etc), visual, command-line
nnoremap <C-J> <Esc>
inoremap <C-J> <Esc>
onoremap <C-J> <Esc>
vnoremap <C-J> <Esc>
cnoremap <C-J> <Esc>

if !has('win32')
	map <S-Insert> <MiddleMouse> " Make shift-insert work like in Xterm
	map! <S-Insert> <MiddleMouse> " Make shift-insert work like in Xterm
endif
map <C-a> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR> " switching between .h and .cpp files that in the SAME directory.
nmap <Space> <PageDown>
vmap <Space> <PageDown>
nmap <C-L> :make<up><CR>
nmap Q l
nmap QQ :w<CR>
inoremap <C-Space> <C-^>
nmap <C-p> :tabnew<Bar>setlocal buftype=nofile<Bar>read !xclip -o<CR>
map <C-t> :cd %:h<CR>:NERDTreeCWD<CR>:NERDTreeFocus<CR>
map <C-n> :cn<CR>

if v:version > 700
	source $XDG_CONFIG_HOME/vim/sessions.vim
endif

silent! call pathogen#infect()
silent! call pathogen#helptags()
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set history=50		" keep 50 lines of command line history
set incsearch		" do incremental searching
set hlsearch
set nobackup
if has('win32')
	set nowritebackup
else
	" On Linux, saving without this option=yes will change inode of the file.
	set backupcopy=yes
endif
if exists('&belloff')
	set belloff=all
endif
silent! set keymap=russian-badger " Toggle with C-^
set iminsert=0
set imsearch=0
set iskeyword=@,48-57,_,192-255
set shiftwidth=4
set tabstop=4
set softtabstop=4
set scrolloff=7
set fo+=cr " perhaps will helps with newline after comments.
set foldmethod=syntax " autofolds
set autoindent
set smartindent
set pastetoggle=<F5>
syntax on
nohl

hi Folded ctermbg=none
hi Folded ctermfg=cyan
hi FoldColumn ctermbg=none
hi FoldColumn ctermfg=cyan

filetype on
filetype plugin indent on
au FileType python set tabstop=4 | set noexpandtab
if v:version >= 700
	au FileType python silent! call ftplugin#python#PyIndentAutoCfg()
endif
au FileType votl set softtabstop=4
augroup XML
    autocmd!
    autocmd FileType xml let g:xml_syntax_folding=1
    autocmd FileType xml setlocal foldmethod=syntax
    autocmd FileType xml :syntax on
    autocmd FileType xml :silent! %foldopen!
augroup END
au FileType html setlocal foldmethod=syntax
au FileType votl setlocal foldlevel=0
let maplocalleader=",," " Vim Outliner leader key.
set foldcolumn=0

set background=light " fixes too bright colours in urxvt
set nonumber
set encoding=utf-8

if has("win32")
  inoremap # X<BS>#
endif

if has("gui_running")
  colorscheme desert
  set guifont=DejaVu_Sans_Mono:h10
  set guioptions-=m " remove menu bar
  set guioptions-=T " remove toolbar
  set guioptions-=r " remove right-hand scroll bar
  set guioptions-=L " remove left-hand scroll bar
  set guioptions-=e " use console-like tab bar
endif

fun! s:DetectJython()
   let shebang = matchstr(getline(1), '#!/usr/bin/env jython')
   if shebang != ""
      set ft=python
   endif
endfun
autocmd BufNewFile,BufRead * call s:DetectJython() " Detecting Jython syntax

let g:detectindent_preferred_when_mixed = 1
let g:detectindent_preferred_indent = &tabstop
let g:detectindent_preferred_expandtab = 0

let g:vim_markdown_frontmatter = 1

au FileType make set noexpandtab
au FileType c set noexpandtab
au FileType cpp set noexpandtab
au FileType changelog set expandtab
au FileType python set noexpandtab
au FileType python set foldmethod=indent
au FileType python set efm=%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m,%Z%m
au FileType python DetectIndent
au BufRead,BufNewFile *.md setfiletype markdown
au FileType markdown setlocal ts=2 sts=2 sw=2 expandtab
au BufRead,BufNewFile *.xsh setfiletype python
if !has('win32')
  au FileType cpp set foldmarker={,}
  au FileType cpp set foldmethod=marker

  au FileType javascript set foldmarker={,}
  au FileType javascript set foldmethod=marker
endif

function! RestoreCursorPositionForFile()
   if line("`\"") <= line("$")
      silent! normal! g`"
      return 1
   endif
endfunction

augroup restore_cursor_position
   autocmd!
   autocmd BufWinEnter * silent! call RestoreCursorPositionForFile()
augroup END

if has('win32')
  " Avoid mswin.vim making Ctrl-v act as paste
  noremap <C-V> <C-V>
  set mouse=c " Disable mouse clicks.
  set fileformats=unix,dos
endif

if has("gui_running")
   cmap <S-Insert> <C-R>+
   set guicursor+=v:-blockCursor
endif

if has("gui_running")
  runtime restore.vim
endif

" In case of old vim that has no support for Pathogen.
if !exists("DetectIndent")
   " Return 1 if using tabs for indents, or 0 otherwise.
   function PyIsTabIndent()
     let lnum = 1
     let got_cols = 0  " 1 if previous lines ended with columns
     while lnum <= 100
       let line = getline(lnum)
       let lnum = lnum + 1
       if got_cols == 1
         if line =~ "^\t\t"  " two tabs to prevent false positives
           return 1
         endif
       endif
       if line =~ ":\s*$"
         let got_cols = 1
       else
         let got_cols = 0
       endif
     endwhile
     return 0
   endfunction

	function MyDetectIndent()
      " Check current buffer and configure for tab or space indents.
      if PyIsTabIndent()
         set noexpandtab
      else
         set expandtab
      endif
	endfunction
	command! -bar -nargs=0 DetectIndent call MyDetectIndent()
endif

" Old Vim 6.0 has no function empty()
if match($MYLOCALVIMRC, "^\\s*$") != -1
	let $MYLOCALVIMRC=$HOME . "/.local/vimrc"
endif
if filereadable($MYLOCALVIMRC)
	source $MYLOCALVIMRC
endif
