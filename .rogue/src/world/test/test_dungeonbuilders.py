import unittest
unittest.defaultTestLoader.testMethodPrefix = 'should'
import textwrap
from .. import dungeonbuilders as builders
from ...engine.builders import Builder
from clckwrkbdgr.math import Point, Size
from clckwrkbdgr.pcg import RNG
from clckwrkbdgr import pcg
from ...engine import items as items_module, appliances as appliances_module

class TestCustomMapLayout(unittest.TestCase):
	def should_generate_map_from_given_custom_layout(self):
		rng = RNG(0)
		builder = builders.CustomMap(rng, """\
				####################
				#........#>##......#
				#........#..#......#
				#....##..##.#......#
				#....#.............#
				#....#.............#
				#........@.........#
				#..................#
				#..................#
				####################
		""")
		builder.generate()
		builder.map_key(**({
			'#':'#',
			'.':'.',
			'start':lambda: 'start',
			'exit':lambda level_id: 'exit',
			}))
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			appliances_module.ObjectAtPos(Point( 9, 6), 'start'),
			appliances_module.ObjectAtPos(Point(10, 1), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				####################
				#........#.##......#
				#........#..#......#
				#....##..##.#......#
				#....#.............#
				#....#.............#
				#..................#
				#..................#
				#..................#
				####################
				""")
		self.assertEqual(grid.tostring(), expected)
	def should_generate_map_from_custom_layout_in_class_field(self):
		class _MockCustomMap(builders.CustomMap):
			MAP_DATA = """\
				####################
				#........#>##......#
				#........#..#......#
				#....##..##.#......#
				#....#.............#
				#....#.............#
				#........@.........#
				#..................#
				#..................#
				####################
				"""
			ENTER_TERRAIN = '"'
			EXIT_TERRAIN = '~'
		rng = RNG(0)
		builder = _MockCustomMap(rng, None)
		builder.map_key(**({
			'#':'#',
			'.':'.',
			'"':'"',
			'~':'~',
			'start':lambda: 'start',
			'exit':lambda level_id: 'exit',
			}))
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			appliances_module.ObjectAtPos(Point( 9, 6), 'start'),
			appliances_module.ObjectAtPos(Point(10, 1), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				####################
				#........#~##......#
				#........#..#......#
				#....##..##.#......#
				#....#.............#
				#....#.............#
				#........".........#
				#..................#
				#..................#
				####################
				""")
		self.assertEqual(grid.tostring(), expected)

class TestRogueDungeon(unittest.TestCase):
	def should_generate_rogue_dungeon(self):
		rng = RNG(1)
		builder = builders.RogueDungeon(rng, Size(80, 25))
		builder.map_key(
				void = ' ',
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda: 'start',
				exit = lambda level_id: 'exit',
				)
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			appliances_module.ObjectAtPos(Point(37, 12), 'start'),
			appliances_module.ObjectAtPos(Point(21, 10), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				_                          +----------------------+                            _
				_  +-------------+         |......................| +-------------+            _
				_  |.............+#######  |......................|#+.............|            _
				_  |.............|      ###+......................+#|.............|            _
				_  |.............|         +---------------------++ |.............|            _
				_  +------+------+                               #  +-------------+            _
				_         ##############      ####################                             _
				_                      #      #                                                _
				_                      #      #                       +--------------------+   _
				_              +-------++    ++------------------+    |....................|   _
				_              |........|    |...................+####+....................|   _
				_              |........|    |...................|    |....................|   _
				_              |........|    |...................|    +-----+--------------+   _
				_              |........|    |...................|          ######             _
				_              +---+----+    ++------------------+               #             _
				_              #####          ####################               #             _
				_      +-------+--+               +--------------++   +----------+----------+  _
				_      |..........|               |...............| ##+.....................|  _
				_      |..........|               |...............| # |.....................|  _
				_      |..........|               |...............+## |.....................|  _
				_      |..........|               |...............|   |.....................|  _
				_      |..........|               |...............|   |.....................|  _
				_      +----------+               +---------------+   +---------------------+  _
				_                                                                              _
				_                                                                              _
				""").replace('_', ' ')
		self.assertEqual(grid.tostring(), expected)

class TestBSPDungeon(unittest.TestCase):
	def should_generate_bsp_dungeon(self):
		rng = RNG(0)
		builder = builders.BSPDungeon(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				doorway = "_",
				rogue_passage = "#",
				start = lambda: 'start',
				exit = lambda level_id: 'exit',
				opened_door = lambda: 'opened_door',
				closed_door = lambda: 'closed_door',
				)
		builder.generate()
		appliances = sorted(builder.make_appliances())
		doors = [appliance for appliance in appliances if appliance.obj.endswith('door')]
		appliances = [appliance for appliance in appliances if not appliance.obj.endswith('door')]
		self.assertEqual(appliances, sorted([
			appliances_module.ObjectAtPos(Point(31, 20), 'start'),
			appliances_module.ObjectAtPos(Point(29, 2), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		for pos, door in doors:
			grid.set_cell(pos, {'closed_door':'+','opened_door':'-'}[door])
		expected = textwrap.dedent("""\
				################################################################################
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#................-.......#............-....#
				#................-..........#.......-................#.......#............#....#
				#................#..........+.......#................#.......#............#....#
				#................#..........#.......#................#.......+............#....#
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#................#.......#............#....#
				####################################################-###########################
				#..............#.....#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#.......-............#.......-......#.#
				#..............#.....#.............#.....#.......#............+.......#......#.#
				#..............#.....#.............#.....-.......#............#.......#......#.#
				#..............#.....-.............-.....#.......#............#.......#......#.#
				#..............-.....#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#.......#............#.......#......#.#
				##########################################-###################################.#
				#...........#.....#........#...............#...........#......#........#.....#.#
				#...........#.....#........#...............#...........#......#........#.....+.#
				#...........#.....-........#...............#...........#......-........+.....#.#
				#...........+.....#........-...............+...........-......#........#.....#.#
				#...........#.....#........#...............#...........#......#........#.....#.#
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)
	def should_generate_bsp_dungeon_with_locked_door(self):
		rng = RNG(2)
		builder = builders.BSPDungeon(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				doorway = "_",
				rogue_passage = "#",
				start = lambda: 'start',
				exit = lambda level_id: 'exit',
				opened_door = lambda: 'opened_door',
				closed_door = lambda: 'closed_door',
				locked_door = lambda key: 'locked_door_'+key,
				door_key = lambda key:"door_key_" + key,
				)
		builder.generate()
		self.assertTrue(builder._locked_door)

		appliances = sorted(builder.make_appliances())
		doors = [appliance for appliance in appliances if appliance.obj.endswith('door')]
		appliances = [appliance for appliance in appliances if not appliance.obj.endswith('door')]
		self.assertEqual(appliances, sorted([
			appliances_module.ObjectAtPos(Point(9, 15), 'start'),
			appliances_module.ObjectAtPos(Point(21, 6), 'locked_door_yellow'),
			appliances_module.ObjectAtPos(Point(78, 10), 'exit'),
			]))

		items = sorted(builder.make_items())
		self.assertEqual(items, sorted([
			appliances_module.ObjectAtPos(Point(15, 3), 'door_key_yellow'),
			]))

		self.maxDiff = None
		grid = builder.make_grid()
		for pos, door in doors:
			grid.set_cell(pos, {'closed_door':'+','opened_door':'-'}[door])
		grid.set_cell(next(_.pos for _ in appliances if _.obj == 'start'), '<')
		grid.set_cell(next(_.pos for _ in appliances if _.obj == 'exit'), '>')
		grid.set_cell(next(_.pos for _ in items if _.item.startswith('door_key')), '*')

		expected = textwrap.dedent("""\
				################################################################################
				#................#.#.#....#.....#......#.............#............#............#
				#................#.#.#....#.....#......#.............#............#............#
				#................#.#.#....#.....#......#.............#............+............#
				#................+.#.#....#.....#......#.............+............#............#
				#................#.#.#....#.....#......-.............#............#............#
				#................#.+._....#.....+......#.............#............#............#
				#................#.#.#....-.....#......#.............#............#............#
				#................#.#.#....#.....#....*.#.............#............#............#
				#######################################################-########################
				#.............................................................................>#
				#..............................................................................#
				####+###########################################################################
				#.........#........#...........#............#......#............#........#.....#
				#.........#........#...........#............#......#............#........#.....#
				#........<#........+...........#............#......#............#........#.....#
				#.........#........#...........#............#......#............#........#.....#
				#.........#........#...........#............#......#............#........#.....#
				#.........-........#...........#............#......#............#........#.....#
				#.........#........#...........-............#......-............#........#.....#
				#.........#........#...........#............#......#............#........#.....#
				#.........#........#...........#............#......#............-........#.....#
				#.........#........#...........#............-......#............#........+.....#
				#.........#........#...........#............#......#............#........#.....#
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)

class TestBSPCityBuilder(unittest.TestCase):
	def should_generate_bsp_dungeon(self):
		rng = RNG(0)
		builder = builders.CityBuilder(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda: 'start',
				exit = lambda level_id: 'exit',
				)
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			appliances_module.ObjectAtPos(Point(11,  1), 'start'),
			appliances_module.ObjectAtPos(Point(58, 22), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				################################################################################
				#..............................................................................#
				#..............................................................................#
				#..............................................................................#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#..............................................................................#
				#..............................................................................#
				#..............................................................................#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#..............................................................................#
				#..............................................................................#
				#..............................................................................#
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)

class TestCaveDungeon(unittest.TestCase):
	def should_generate_cave_dungeon(self):
		rng = RNG(0)
		builder = builders.CaveBuilder(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda: 'start',
				exit = lambda level_id: 'exit',
				)
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			appliances_module.ObjectAtPos(Point( 9, 9), 'start'),
			appliances_module.ObjectAtPos(Point(51, 2), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				################################################################################
				########.#######......####..........#.........###########...#.#...............##
				#...###....####................................##...###........................#
				#....####...#..........##......................##..............................#
				#............................#.....#...........................................#
				#..............#............###...###........................##....####........#
				#...........####............##....####...####.......#####.........######......##
				#...........####............##....###...#######....#######........#######.....##
				#...........###...........##.......##...########...................######....###
				##.....................###..............#######...............#....######....###
				####..................####..............####.........................###......##
				####...................#................##....................................##
				#####.............#................##.......................................#.##
				####..............................####......................................#.##
				##......###.........#.#............###.......................##................#
				#.......####........#####.#.##.....####....................####................#
				#.......####........############....###....................###................##
				#.......#####........##########......###..............#.......................##
				#......#####.........#######.........##...##.................................###
				#....#######..........#####..........###..##..................................##
				#...######.............##.................##..................................##
				#....###...............#......##....###...###..................................#
				#............................####.........####.................................#
				##............#####...##....############.#######..###......###................##
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)

class TestMazeDungeon(unittest.TestCase):
	def should_generate_maze(self):
		rng = RNG(0)
		builder = builders.MazeBuilder(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda: 'start',
				exit = lambda level_id: 'exit',
				)
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			appliances_module.ObjectAtPos(Point( 7,  4), 'start'),
			appliances_module.ObjectAtPos(Point(25, 20), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				################################################################################
				#.#.....#.#.....#.......#...#...#...#...#.....#...#...........#.....#...#...#.##
				#.#.#.#.#.#.###.#.#####.#.#.#.#.#.#.###.#.###.#.###.#########.#.###.###.#.#.#.##
				#...#.#.#.....#.....#.#.#.#.#.#.#.#.#...#...#.......#.........#.#...#...#.#.#.##
				#.#.#.#.###########.#.#.#.#.###.#.#.#.###.#.#######.#.###########.###.###.#.#.##
				#.#.#.#.......#.....#...#.#...#...#.#.....#.#.....#.#...#...#.............#.#.##
				###.#.#######.#.#####.###.###.#.###.#######.#.#####.###.#.###.###.#########.#.##
				#...#.#.#...#.#.....#.#.#.#.#...#.#.....#.#.#.....#.#...#...#.#...#...#.....#.##
				#.#.#.#.#.#.#.#####.#.#.#.#.#.###.#.###.#.#.#####.#.#.#####.#.#####.#.#######.##
				#.#.#.#.#.#.#.......#.#.#.#...#.......#.#.#.#.....#.#.#...#.#.......#.#.......##
				#.#.#.#.#.#.#.#######.#.#.#########.###.#.#.#.#####.#.###.#.#########.#.#####.##
				#.#.#.#.#.#...#.....#.....#.#.....#...#...#.#.....#.#.#...#...#.......#.....#.##
				###.#.#.#.#####.###.#######.#.###.#.#.#####.#####.#.#.#.#.#.#.#.#########.#.####
				#...#...#.#...#.#.......#...#...#.#.#.....#.......#.#.#.#.#.#...#.........#...##
				#.#######.#.###.#.#####.#.#####.###.#####.#.###.###.#.#.#.#.#################.##
				#.#.......#.....#.....#.#.....#.....#...#.#.#.#...#.#.#.#.#.........#...#.#...##
				###.#########.#######.#.###.#.#########.#.#.#.###.#.#.#.###.#######.#.#.#.#.####
				#.#.#.........#.#...#.#...#.#.....#.....#.#.#.....#.#.....#...#...#.#.#.#...#.##
				#.#.###.#######.#.#.#####.#.#####.###.#.#.#.#.#####.#####.#.#.#.###.#.#.#.#.#.##
				#.....#.......#.#.#.....#.#.....#.....#.#.#.#.#...#.....#.#.#.#...#.#.#...#.#.##
				#.###.#######.#.#.###.#.#.#.#############.#.###.#.#####.#.#.#.#.#.#.#.#.###.#.##
				#...#.......#...#.#.#.#.#.#...#...........#...#.#...#...#.#.#.#.#.#...#...#.#.##
				###.###.#.#.#####.#.#.###.###.#.#.#########.#.###.#.#.###.###.#.#.#########.#.##
				#...#...#.#.........#.......#...#...........#.....#.#...#.....#.#.............##
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)

class TestSewers(unittest.TestCase):
	def should_generate_sewers_maze(self):
		rng = RNG(0)
		builder = builders.Sewers(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda: 'start',
				exit = lambda level_id: 'exit',
				)
		builder.generate()
		self.maxDiff = None
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			appliances_module.ObjectAtPos(Point(10, 13), 'start'),
			appliances_module.ObjectAtPos(Point(17, 8), 'exit'),
			]))
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				################################################################################
				#....................####....####............................................###
				#.~~~~~~~~~~~~~~~~~~.####.~~.####.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.###
				#.........~~......~~.####.~~.####.~~......................................~~.###
				#########.~~.####.~~.####.~~.####.~~.####################################.~~.###
				#########.~~.####.~~.####.~~.####.~~.####################################.~~.###
				#########.~~.####.~~.####.~~.####.~~.####################################.~~.###
				#.........~~.####.~~.####.~~......~~.####............................####.~~.###
				#.~~~~~~~~~~.####.~~.####.~~~~~~~~~~.####.~~~~~~~~~~~~~~~~~~~~~~~~~~.####.~~.###
				#.~~.........####.~~.####.........~~.####.~~......................~~.####.~~.###
				#.~~.############.~~.############.~~.####.~~.####################.~~.####.~~.###
				#.~~.############.~~.############.~~.####.~~.####################.~~.####.~~.###
				#.~~.############.~~.############.~~.####.~~.####################.~~.####.~~.###
				#.~~.####.........~~..............~~.####.~~.####............####.~~.####.~~.###
				#.~~.####.~~~~~~~~~~~~~~~~~~~~~~~~~~.####.~~.####.~~~~~~~~~~.####.~~.####.~~.###
				#....####.~~......~~.................####.~~.####.~~.........####.~~.####.~~.###
				#########.~~.####.~~.####################.~~.####.~~.############.~~.####.~~.###
				#########.~~.####.~~.####################.~~.####.~~.############.~~.####.~~.###
				#########.~~.####.~~.####################.~~.####.~~.############.~~.####.~~.###
				#.........~~.####.~~......................~~.####.~~..............~~.####.~~.###
				#.~~~~~~~~~~.####.~~~~~~~~~~~~~~~~~~~~~~~~~~.####.~~~~~~~~~~~~~~~~~~.####.~~.###
				#............####............................####....................####....###
				################################################################################
				################################################################################
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)
