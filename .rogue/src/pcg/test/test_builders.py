import unittest
unittest.defaultTestLoader.testMethodPrefix = 'should'
import textwrap
from .. import builders
from ...engine.builders import Builder
from clckwrkbdgr.math import Point, Size
from clckwrkbdgr.pcg import RNG
from clckwrkbdgr import pcg

class TestCustomMapLayout(unittest.TestCase):
	def should_generate_map_from_given_custom_layout(self):
		rng = RNG(0)
		builder = builders.CustomMap(rng, """\
				####################
				#........#>##......#
				#........#..#......#
				#....##..##.#......#
				#....#.............#
				#....#.............#
				#........@.........#
				#..................#
				#..................#
				####################
		""")
		builder.generate()
		builder.map_key(**({
			'#':'#',
			'.':'.',
			'start':lambda pos: (pos, 'start'),
			'exit':lambda pos: (pos, 'exit'),
			}))
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			(Point(9, 6), 'start'),
			(Point(10, 1), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				####################
				#........#.##......#
				#........#..#......#
				#....##..##.#......#
				#....#.............#
				#....#.............#
				#..................#
				#..................#
				#..................#
				####################
				""")
		self.assertEqual(grid.tostring(), expected)
	def should_generate_map_from_custom_layout_in_class_field(self):
		class _MockCustomMap(builders.CustomMap):
			MAP_DATA = """\
				####################
				#........#>##......#
				#........#..#......#
				#....##..##.#......#
				#....#.............#
				#....#.............#
				#........@.........#
				#..................#
				#..................#
				####################
				"""
			ENTER_TERRAIN = '"'
			EXIT_TERRAIN = '~'
		rng = RNG(0)
		builder = _MockCustomMap(rng, None)
		builder.map_key(**({
			'#':'#',
			'.':'.',
			'"':'"',
			'~':'~',
			'start':lambda pos: (pos, 'start'),
			'exit':lambda pos: (pos, 'exit'),
			}))
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			(Point(9, 6), 'start'),
			(Point(10, 1), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				####################
				#........#~##......#
				#........#..#......#
				#....##..##.#......#
				#....#.............#
				#....#.............#
				#........".........#
				#..................#
				#..................#
				####################
				""")
		self.assertEqual(grid.tostring(), expected)

class TestRogueDungeon(unittest.TestCase):
	def should_generate_rogue_dungeon(self):
		rng = RNG(1)
		builder = builders.RogueDungeon(rng, Size(80, 25))
		builder.map_key(
				void = ' ',
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda pos: (pos, 'start'),
				exit = lambda pos: (pos, 'exit'),
				)
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			(Point(37, 12), 'start'),
			(Point(21, 10), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				_                          +----------------------+                            _
				_  +-------------+         |......................| +-------------+            _
				_  |.............+#######  |......................|#+.............|            _
				_  |.............|      ###+......................+#|.............|            _
				_  |.............|         +---------------------++ |.............|            _
				_  +------+------+                               #  +-------------+            _
				_         ##############      ####################                             _
				_                      #      #                                                _
				_                      #      #                       +--------------------+   _
				_              +-------++    ++------------------+    |....................|   _
				_              |........|    |...................+####+....................|   _
				_              |........|    |...................|    |....................|   _
				_              |........|    |...................|    +-----+--------------+   _
				_              |........|    |...................|          ######             _
				_              +---+----+    ++------------------+               #             _
				_              #####          ####################               #             _
				_      +-------+--+               +--------------++   +----------+----------+  _
				_      |..........|               |...............| ##+.....................|  _
				_      |..........|               |...............| # |.....................|  _
				_      |..........|               |...............+## |.....................|  _
				_      |..........|               |...............|   |.....................|  _
				_      |..........|               |...............|   |.....................|  _
				_      +----------+               +---------------+   +---------------------+  _
				_                                                                              _
				_                                                                              _
				""").replace('_', ' ')
		self.assertEqual(grid.tostring(), expected)

class TestBSPDungeon(unittest.TestCase):
	def should_generate_bsp_dungeon(self):
		rng = RNG(0)
		builder = builders.BSPDungeon(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda pos: (pos, 'start'),
				exit = lambda pos: (pos, 'exit'),
				)
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			(Point(31, 20), 'exit'),
			(Point(55, 22), 'start'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				################################################################################
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#........................#.................#
				#...........................#........................#.......#............#....#
				#................#..................#................#.......#............#....#
				#................#..........#.......#................#....................#....#
				#................#..........#.......#................#.......#............#....#
				#................#..........#.......#................#.......#............#....#
				####################################################.###########################
				#..............#.....#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#....................#..............#.#
				#..............#.....#.............#.....#.......#....................#......#.#
				#..............#.....#.............#.............#............#.......#......#.#
				#..............#.........................#.......#............#.......#......#.#
				#....................#.............#.....#.......#............#.......#......#.#
				#..............#.....#.............#.....#.......#............#.......#......#.#
				##########################################.###################################.#
				#...........#.....#........#...............#...........#......#........#.....#.#
				#...........#.....#........#...............#...........#......#........#.......#
				#...........#..............#...............#...........#.....................#.#
				#.................#...........................................#........#.....#.#
				#...........#.....#........#...............#...........#......#........#.....#.#
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)

class TestBSPCityBuilder(unittest.TestCase):
	def should_generate_bsp_dungeon(self):
		rng = RNG(0)
		builder = builders.CityBuilder(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda pos: (pos, 'start'),
				exit = lambda pos: (pos, 'exit'),
				)
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			(Point(11, 1), 'start'),
			(Point(58, 22), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				################################################################################
				#..............................................................................#
				#..............................................................................#
				#..............................................................................#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#...#########################...############################################...#
				#..............................................................................#
				#..............................................................................#
				#..............................................................................#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#...###############################...########...#####...############...####...#
				#..............................................................................#
				#..............................................................................#
				#..............................................................................#
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)

class TestCaveDungeon(unittest.TestCase):
	def should_generate_cave_dungeon(self):
		rng = RNG(0)
		builder = builders.CaveBuilder(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda pos: (pos, 'start'),
				exit = lambda pos: (pos, 'exit'),
				)
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			(Point(9, 9), 'start'),
			(Point(51, 2), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				################################################################################
				########.#######......####..........#.........###########...#.#...............##
				#...###....####................................##...###........................#
				#....####...#..........##......................##..............................#
				#............................#.....#...........................................#
				#..............#............###...###........................##....####........#
				#...........####............##....####...####.......#####.........######......##
				#...........####............##....###...#######....#######........#######.....##
				#...........###...........##.......##...########...................######....###
				##.....................###..............#######...............#....######....###
				####..................####..............####.........................###......##
				####...................#................##....................................##
				#####.............#................##.......................................#.##
				####..............................####......................................#.##
				##......###.........#.#............###.......................##................#
				#.......####........#####.#.##.....####....................####................#
				#.......####........############....###....................###................##
				#.......#####........##########......###..............#.......................##
				#......#####.........#######.........##...##.................................###
				#....#######..........#####..........###..##..................................##
				#...######.............##.................##..................................##
				#....###...............#......##....###...###..................................#
				#............................####.........####.................................#
				##............#####...##....############.#######..###......###................##
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)

class TestMazeDungeon(unittest.TestCase):
	def should_generate_maze(self):
		rng = RNG(0)
		builder = builders.MazeBuilder(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda pos: (pos, 'start'),
				exit = lambda pos: (pos, 'exit'),
				)
		builder.generate()
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			(Point(7, 4), 'start'),
			(Point(25, 20), 'exit'),
			]))
		self.maxDiff = None
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				################################################################################
				#.#.....#.#.....#.......#...#...#...#...#.....#...#...........#.....#...#...#.##
				#.#.#.#.#.#.###.#.#####.#.#.#.#.#.#.###.#.###.#.###.#########.#.###.###.#.#.#.##
				#...#.#.#.....#.....#.#.#.#.#.#.#.#.#...#...#.......#.........#.#...#...#.#.#.##
				#.#.#.#.###########.#.#.#.#.###.#.#.#.###.#.#######.#.###########.###.###.#.#.##
				#.#.#.#.......#.....#...#.#...#...#.#.....#.#.....#.#...#...#.............#.#.##
				###.#.#######.#.#####.###.###.#.###.#######.#.#####.###.#.###.###.#########.#.##
				#...#.#.#...#.#.....#.#.#.#.#...#.#.....#.#.#.....#.#...#...#.#...#...#.....#.##
				#.#.#.#.#.#.#.#####.#.#.#.#.#.###.#.###.#.#.#####.#.#.#####.#.#####.#.#######.##
				#.#.#.#.#.#.#.......#.#.#.#...#.......#.#.#.#.....#.#.#...#.#.......#.#.......##
				#.#.#.#.#.#.#.#######.#.#.#########.###.#.#.#.#####.#.###.#.#########.#.#####.##
				#.#.#.#.#.#...#.....#.....#.#.....#...#...#.#.....#.#.#...#...#.......#.....#.##
				###.#.#.#.#####.###.#######.#.###.#.#.#####.#####.#.#.#.#.#.#.#.#########.#.####
				#...#...#.#...#.#.......#...#...#.#.#.....#.......#.#.#.#.#.#...#.........#...##
				#.#######.#.###.#.#####.#.#####.###.#####.#.###.###.#.#.#.#.#################.##
				#.#.......#.....#.....#.#.....#.....#...#.#.#.#...#.#.#.#.#.........#...#.#...##
				###.#########.#######.#.###.#.#########.#.#.#.###.#.#.#.###.#######.#.#.#.#.####
				#.#.#.........#.#...#.#...#.#.....#.....#.#.#.....#.#.....#...#...#.#.#.#...#.##
				#.#.###.#######.#.#.#####.#.#####.###.#.#.#.#.#####.#####.#.#.#.###.#.#.#.#.#.##
				#.....#.......#.#.#.....#.#.....#.....#.#.#.#.#...#.....#.#.#.#...#.#.#...#.#.##
				#.###.#######.#.#.###.#.#.#.#############.#.###.#.#####.#.#.#.#.#.#.#.#.###.#.##
				#...#.......#...#.#.#.#.#.#...#...........#...#.#...#...#.#.#.#.#.#...#...#.#.##
				###.###.#.#.#####.#.#.###.###.#.#.#########.#.###.#.#.###.###.#.#.#########.#.##
				#...#...#.#.........#.......#...#...........#.....#.#...#.....#.#.............##
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)

class TestSewers(unittest.TestCase):
	def should_generate_sewers_maze(self):
		rng = RNG(0)
		builder = builders.Sewers(rng, Size(80, 25))
		builder.map_key(
				wall = '#',
				floor = ".",
				tunnel_floor = ".",
				water = "~",
				corner = "+",
				wall_h = "-",
				wall_v = "|",
				rogue_door = "+",
				rogue_passage = "#",
				start = lambda pos: (pos, 'start'),
				exit = lambda pos: (pos, 'exit'),
				)
		builder.generate()
		self.maxDiff = None
		appliances = sorted(builder.make_appliances())
		self.assertEqual(appliances, sorted([
			(Point(10, 13), 'start'),
			(Point(17, 8), 'exit'),
			]))
		grid = builder.make_grid()
		expected = textwrap.dedent("""\
				################################################################################
				#....................####....####............................................###
				#.~~~~~~~~~~~~~~~~~~.####.~~.####.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.###
				#.........~~......~~.####.~~.####.~~......................................~~.###
				#########.~~.####.~~.####.~~.####.~~.####################################.~~.###
				#########.~~.####.~~.####.~~.####.~~.####################################.~~.###
				#########.~~.####.~~.####.~~.####.~~.####################################.~~.###
				#.........~~.####.~~.####.~~......~~.####............................####.~~.###
				#.~~~~~~~~~~.####.~~.####.~~~~~~~~~~.####.~~~~~~~~~~~~~~~~~~~~~~~~~~.####.~~.###
				#.~~.........####.~~.####.........~~.####.~~......................~~.####.~~.###
				#.~~.############.~~.############.~~.####.~~.####################.~~.####.~~.###
				#.~~.############.~~.############.~~.####.~~.####################.~~.####.~~.###
				#.~~.############.~~.############.~~.####.~~.####################.~~.####.~~.###
				#.~~.####.........~~..............~~.####.~~.####............####.~~.####.~~.###
				#.~~.####.~~~~~~~~~~~~~~~~~~~~~~~~~~.####.~~.####.~~~~~~~~~~.####.~~.####.~~.###
				#....####.~~......~~.................####.~~.####.~~.........####.~~.####.~~.###
				#########.~~.####.~~.####################.~~.####.~~.############.~~.####.~~.###
				#########.~~.####.~~.####################.~~.####.~~.############.~~.####.~~.###
				#########.~~.####.~~.####################.~~.####.~~.############.~~.####.~~.###
				#.........~~.####.~~......................~~.####.~~..............~~.####.~~.###
				#.~~~~~~~~~~.####.~~~~~~~~~~~~~~~~~~~~~~~~~~.####.~~~~~~~~~~~~~~~~~~.####.~~.###
				#............####............................####....................####....###
				################################################################################
				################################################################################
				################################################################################
				""")
		self.assertEqual(grid.tostring(), expected)
